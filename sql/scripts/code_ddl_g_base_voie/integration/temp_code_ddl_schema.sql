CREATE OR REPLACE FUNCTION GET_CODE_INSEE_CONTAIN(v_table_name VARCHAR2, v_geometry SDO_GEOMETRY) RETURN CHAR
/*
Cette fonction a pour objectif de récupérer le code INSEE de la commune dans laquelle se situe le point médian d'un objet linéaire.
*/
    DETERMINISTIC
    As
    v_code_insee CHAR(8);
    BEGIN
        SELECT 
            b.code_insee INTO v_code_insee 
        FROM 
            G_REFERENTIEL.MEL_COMMUNE b, 
            USER_SDO_GEOM_METADATA m
        WHERE
            m.table_name = v_table_name
            AND SDO_CONTAINS(
                    b.geom,
                    SDO_LRS.CONVERT_TO_STD_GEOM(
                        SDO_LRS.LOCATE_PT(
                                        SDO_LRS.CONVERT_TO_LRS_GEOM(v_geometry,m.diminfo),
                                        SDO_GEOM.SDO_LENGTH(v_geometry,m.diminfo)/2
                        )
                    )
                )='TRUE';
        RETURN v_code_insee;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'error';
    END GET_CODE_INSEE_CONTAIN;

/
CREATE OR REPLACE FUNCTION GET_CODE_INSEE_POURCENTAGE(v_table_name VARCHAR2, v_geometry SDO_GEOMETRY) RETURN CHAR
/*
Cette fonction a pour objectif de récupérer le code INSEE de la commune dans laquelle se situe plus de 50% d'un objet linéaire.
ATTENTION : Cette fonction N'EST PAS A UTILISER pour des objets de types points.
*/
    DETERMINISTIC
    As
    v_code_insee CHAR(8);
    BEGIN
        SELECT 
            b.code_insee INTO v_code_insee 
        FROM 
            G_REFERENTIEL.MEL_COMMUNE b, 
            USER_SDO_GEOM_METADATA m
        WHERE
            m.table_name = v_table_name
            AND (SDO_GEOM.SDO_LENGTH(SDO_GEOM.SDO_INTERSECTION(v_geometry, b.geom, 0.005))/ SDO_GEOM.SDO_LENGTH(v_geometry,m.diminfo))*100 > 50;
        RETURN v_code_insee;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'error';
    END GET_CODE_INSEE_POURCENTAGE;

/
CREATE OR REPLACE FUNCTION GET_CODE_INSEE_WITHIN_DISTANCE(v_table_name VARCHAR2, v_geometry SDO_GEOMETRY) RETURN CHAR
/*
Cette fonction a pour objectif de récupérer le code INSEE de la commune située à deux mètres maximum de l'objet interrogé, sachant que ce dernier n'est pas dans les communes de la MEL.
La fonction localise le point médian de l'objet (situé en-dehors de la MEL) et, s'il se trouve à plus de deux mètres d'une commune, elle renvoie 'error', sinon, elle renvoie le code INSEE de la commune.
*/
    DETERMINISTIC
    As
    v_code_insee CHAR(8);
    BEGIN
        SELECT 
            b.code_insee INTO v_code_insee 
        FROM 
            G_REFERENTIEL.MEL_COMMUNE b, 
            USER_SDO_GEOM_METADATA m
        WHERE
            m.table_name = v_table_name
            AND SDO_FILTER(b.geom, v_geometry) <> 'TRUE'
            AND SDO_GEOM.WITHIN_DISTANCE(SDO_LRS.CONVERT_TO_STD_GEOM(
                SDO_LRS.LOCATE_PT(
                                SDO_LRS.CONVERT_TO_LRS_GEOM(v_geometry,m.diminfo),
                                SDO_GEOM.SDO_LENGTH(v_geometry,m.diminfo)/2
                )
            ), 2, b.geom, 0.005) = 'TRUE';
        RETURN v_code_insee;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'error';
    END GET_CODE_INSEE_WITHIN_DISTANCE;
    
/
CREATE OR REPLACE FUNCTION GET_CODE_INSEE_TRONCON(v_table_name VARCHAR2, v_geometry SDO_GEOMETRY) RETURN CHAR
/*
Cette fonction a pour objectif de récupérer le code INSEE de chaque tronçon.
Pour cela elle traite différents cas via les fonctions ci-dessous :
- GET_CODE_INSEE_CONTAIN ;
- GET_CODE_INSEE_POURCENTAGE ;
- GET_CODE_INSEE_WITHIN_DISTANCE ;
*/
    DETERMINISTIC
    As
    v_code_insee CHAR(8);
    BEGIN
        IF GET_CODE_INSEE_CONTAIN(v_table_name, v_geometry) <> 'error' THEN
            v_code_insee := GET_CODE_INSEE_CONTAIN(v_table_name, v_geometry);
        ELSIF GET_CODE_INSEE_POURCENTAGE(v_table_name, v_geometry) <> 'error' THEN
            v_code_insee := GET_CODE_INSEE_POURCENTAGE(v_table_name, v_geometry);
        ELSIF GET_CODE_INSEE_WITHIN_DISTANCE(v_table_name, v_geometry) <> 'error' THEN
            v_code_insee := GET_CODE_INSEE_WITHIN_DISTANCE(v_table_name, v_geometry);
        END IF;
        RETURN v_code_insee;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'erreur';
    END GET_CODE_INSEE_TRONCON;
    
/
/*
La table TA_AGENT regroupant les pnoms de tous les agents ayant travaillés et qui travaillent encore pour la base voie.
*/

-- 1. Création de la table TA_AGENT
CREATE TABLE G_BASE_VOIE.TA_AGENT(
    numero_agent NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    pnom VARCHAR2(50) NOT NULL,
    validite NUMBER(1) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_AGENT IS 'Table listant les pnoms de tous les agents ayant travaillés et qui travaillent encore pour la base voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_AGENT.numero_agent IS 'Numéro d''agent présent sur la carte de chaque agent.';
COMMENT ON COLUMN G_BASE_VOIE.TA_AGENT.pnom IS 'Pnom de l''agent, c''est-à-dire la concaténation de l''initiale de son prénom et de son nom entier.';
COMMENT ON COLUMN G_BASE_VOIE.TA_AGENT.validite IS 'Validité de l''agent, c''est-à-dire que ce champ permet de savoir si l''agent continue de travailler dans/pour la base voie ou non : 1 = oui ; 0 = non.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_AGENT 
ADD CONSTRAINT TA_AGENT_PK 
PRIMARY KEY("NUMERO_AGENT") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_AGENT TO G_ADMIN_SIG;
/*
La table TA_FAMILLE regroupe toutes les familles des types détats et d''objets de la base base voie.
*/

-- 1. Création de la table TA_FAMILLE
CREATE TABLE G_BASE_VOIE.TA_FAMILLE(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    valeur VARCHAR2(400) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_FAMILLE IS 'Table listant toutes les familles des types d''états et d''objets de la base base voie, ce qui permet de les catégoriser.';
COMMENT ON COLUMN G_BASE_VOIE.TA_FAMILLE.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_FAMILLE.valeur IS 'Famille d''objets ou d''actions permettant de catégoriser un état ou un objet dans la base voie.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_FAMILLE 
ADD CONSTRAINT TA_FAMILLE_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_FAMILLE TO G_ADMIN_SIG;
/*
La table TA_RIVOLI regroupe tous les tronçons de la base voie.
*/

-- 1. Création de la table TA_RIVOLI
CREATE TABLE G_BASE_VOIE.TA_RIVOLI(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    code_rivoli CHAR(4) NOT NULL,
    cle_controle CHAR(1)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_RIVOLI IS 'Table rassemblant tous les codes fantoirs issus du fichier fantoir et correspondants aux voies présentes sur le territoire de la MEL.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RIVOLI.objectid IS 'Clé primaire auto-incrémentée de la table identifiant.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RIVOLI.code_rivoli IS 'Code RIVOLI du code fantoir. Ce code est l''identifiant sur 4 caractères de la voie au sein de la commune. Attention : il ne faut pas confondre ce code avec le code de l''ancien fichier RIVOLI, devenu depuis fichier fantoir. Le code RIVOLI fait partie du code fantoir. Attention cet identifiant est recyclé dans le fichier fantoir, ce champ ne doit donc jamais être utilisé en tant que clé primaire ou étrangère.' ;
COMMENT ON COLUMN G_BASE_VOIE.TA_RIVOLI.cle_controle IS 'Clé de contrôle du code fantoir issue du fichier fantoir.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_RIVOLI 
ADD CONSTRAINT TA_RIVOLI_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des index
CREATE INDEX TA_RIVOLI_code_rivoli_IDX ON G_BASE_VOIE.TA_RIVOLI(code_rivoli)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_RIVOLI_cle_controle_IDX ON G_BASE_VOIE.TA_RIVOLI(cle_controle)
    TABLESPACE G_ADT_INDX;

-- 5. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_RIVOLI TO G_ADMIN_SIG;/*
La table TA_LIBELLE regroupant tous les types et états permettant de catégoriser les objets de la base voie.
*/

-- 1. Création de la table TA_LIBELLE
CREATE TABLE G_BASE_VOIE.TA_LIBELLE(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    valeur VARCHAR2(400) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_LIBELLE IS 'Table listant les types et états permettant de catégoriser les objets de la base voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_LIBELLE.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_LIBELLE.valeur IS 'Nom des types d''objets ou des états permettant de catégoriser les objets de la base voie. Ces libellés sont catégorisés par famille.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_LIBELLE 
ADD CONSTRAINT TA_LIBELLE_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_LIBELLE TO G_ADMIN_SIG;
/*
La table TA_RELATION_FAMILLE_LIBELLE regroupant tous les types et états permettant de catégoriser les objets de la base voie.
*/

-- 1. Création de la table TA_RELATION_FAMILLE_LIBELLE
CREATE TABLE G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    fid_famille NUMBER(38,0) NOT NULL,
    fid_libelle NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE IS 'Table pivot permettant d''associer des libellés à des familles afin de catégoriser les états et les objets de la base voie. Exemple : La famille action dipose des libellés création, modification et suppression ; La famile genre dispose des libellés masculin, féminin et neutre.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE.fid_famille IS 'Clé étrangère vers la table TA_FAMILLE permettant d''associer une ou plusieurs familles à un ou plusieurs libellés afin de catégoriser les états et les objets de la base voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE.fid_libelle IS 'Clé étrangère vers la table TA_LIBELLE permettant d''associer un ou plusieurs libellés à une ou plusieurs familles, afin de catégoriser les états et les objets de la base voie.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE 
ADD CONSTRAINT TA_RELATION_FAMILLE_LIBELLE_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE
ADD CONSTRAINT TA_RELATION_FAMILLE_LIBELLE_FID_FAMILLE_FK
FOREIGN KEY (fid_famille)
REFERENCES G_BASE_VOIE.ta_famille(objectid);

ALTER TABLE G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE
ADD CONSTRAINT TA_RELATION_FAMILLE_LIBELLE_FID_LIBELLE_FK
FOREIGN KEY (fid_libelle)
REFERENCES G_BASE_VOIE.ta_libelle(objectid);

-- 5. Création des index sur les clés étrangères
CREATE INDEX TA_RELATION_FAMILLE_LIBELLE_FID_FAMILLE_IDX ON G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE(fid_famille)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_RELATION_FAMILLE_LIBELLE_FID_LIBELLE_IDX ON G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE(fid_libelle)
    TABLESPACE G_ADT_INDX;

-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_RELATION_FAMILLE_LIBELLE TO G_ADMIN_SIG;
/*
La table TA_TRONCON regroupe tous les tronçons de la base voie.
*/

-- 1. Création de la table TA_TRONCON
CREATE TABLE G_BASE_VOIE.TA_TRONCON(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    geom SDO_GEOMETRY NOT NULL,
    date_saisie DATE DEFAULT sysdate NOT NULL,
    date_modification DATE DEFAULT sysdate NOT NULL,
    fid_pnom_saisie NUMBER(38,0) NOT NULL,
    fid_pnom_modification NUMBER(38,0) NOT NULL,
    fid_metadonnee NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_TRONCON IS 'Table contenant les tronçons de la base voie. Les tronçons sont les objets de base de la base voie servant à constituer les rues qui elles-mêmes constituent les voies. Ancienne table : ILTATRC.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON.objectid IS 'Clé primaire de la table identifiant chaque tronçon. Cette pk est auto-incrémentée et remplace l''ancien identifiant cnumtrc.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON.geom IS 'Géométrie de type ligne simple de chaque tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON.date_saisie IS 'date de saisie du tronçon (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON.date_modification IS 'Dernière date de modification du tronçon (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON.fid_pnom_saisie IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé un tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON.fid_pnom_modification IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant modifié un tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON.fid_metadonnee IS 'Clé étrangère vers la table G_GEO.TA_METADONNEE permettant de connaître la source des tronçons (MEL ou IGN).';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_TRONCON 
ADD CONSTRAINT TA_TRONCON_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TA_TRONCON',
    'geom',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TA_TRONCON_SIDX
ON G_BASE_VOIE.TA_TRONCON(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
PARAMETERS('sdo_indx_dims=2, layer_gtype=LINE, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_TRONCON
ADD CONSTRAINT TA_TRONCON_FID_PNOM_SAISIE_FK 
FOREIGN KEY (fid_pnom_saisie)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_TRONCON
ADD CONSTRAINT TA_TRONCON_FID_PNOM_MODIFICATION_FK
FOREIGN KEY (fid_pnom_modification)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_TRONCON
ADD CONSTRAINT TA_TRONCON_FID_METADONNEE_FK
FOREIGN KEY (fid_metadonnee)
REFERENCES G_GEO.ta_metadonnee(objectid);

-- 7. Création des index sur les clés étrangères et autres
CREATE INDEX TA_TRONCON_FID_PNOM_SAISIE_IDX ON G_BASE_VOIE.TA_TRONCON(fid_pnom_saisie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_TRONCON_FID_PNOM_MODIFICATION_IDX ON G_BASE_VOIE.TA_TRONCON(fid_pnom_modification)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_TRONCON_FID_METADONNEE_IDX ON G_BASE_VOIE.TA_TRONCON(fid_metadonnee)
    TABLESPACE G_ADT_INDX;

-- Cet index dispose d'une fonction permettant d'accélérer la récupération du code INSEE de la commune d'appartenance du tronçon. 
-- Il créé également un champ virtuel dans lequel on peut aller chercher ce code INSEE.
CREATE INDEX TA_TRONCON_CODE_INSEE_IDX
ON G_BASE_VOIE.TA_TRONCON(GET_CODE_INSEE_CHEVAUCHEMENT('TA_TRONCON', geom))
TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_TRONCON TO G_ADMIN_SIG;
/*
La table TA_TRONCON_LOG regroupe toutes les évolutions des tronçons de la base voie situés dans TA_TRONCON.
*/

-- 1. Création de la table TA_TRONCON_LOG
CREATE TABLE G_BASE_VOIE.TA_TRONCON_LOG(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    geom SDO_GEOMETRY NOT NULL,
    date_action DATE NOT NULL,
    fid_type_action NUMBER(38,0) NOT NULL,
    fid_pnom NUMBER(38,0) NOT NULL,
    fid_troncon NUMBER(38,0) NOT NULL,
    fid_troncon_pere NUMBER(38,0)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_TRONCON_LOG IS 'Table d''historisation des actions effectuées sur les tronçons de la base voie. Cette table reprend notamment le champ fid_troncon_pere de l''ancienne table ILTAFILIA.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON_LOG.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON_LOG.geom IS 'Géométrie de type ligne simple de chaque tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON_LOG.date_action IS 'date de saisie, modification et suppression du tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON_LOG.fid_type_action IS 'Clé étrangère vers la table TA_LIBELLE permettant de catégoriser le type d''action effectué sur les tronçons.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON_LOG.fid_pnom IS 'Clé étrangère vers la table TA_AGENT permettant d''associer le pnom d''un agent au tronçon qu''il a créé, modifié ou supprimé.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON_LOG.fid_troncon IS 'Clé étrangère vers la table TA_TRONCON permettant de savoir sur quel tronçon ont été effectué les actions.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TRONCON_LOG.fid_troncon_pere IS 'Clé étrangère vers la table TA_TRONCON permettant, en cas de coupure de tronçon, de savoir quel était le tronçon original.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_TRONCON_LOG 
ADD CONSTRAINT TA_TRONCON_LOG_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TA_TRONCON_LOG',
    'geom',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TA_TRONCON_LOG_SIDX
ON G_BASE_VOIE.TA_TRONCON_LOG(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
PARAMETERS('sdo_indx_dims=2, layer_gtype=LINE, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_TRONCON_LOG
ADD CONSTRAINT TA_TRONCON_LOG_FID_TYPE_ACTION_FK 
FOREIGN KEY (fid_type_action)
REFERENCES G_BASE_VOIE.ta_libelle(objectid);

ALTER TABLE G_BASE_VOIE.TA_TRONCON_LOG
ADD CONSTRAINT TA_TRONCON_LOG_FID_PNOM_FK
FOREIGN KEY (fid_pnom)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

-- 7. Création des index sur les clés étrangères
CREATE INDEX TA_TRONCON_LOG_FID_TRONCON_IDX ON G_BASE_VOIE.TA_TRONCON_LOG(fid_troncon)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_TRONCON_LOG_FID_TRONCON_PERE_IDX ON G_BASE_VOIE.TA_TRONCON_LOG(fid_troncon_pere)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_TRONCON_LOG_FID_TYPE_ACTION_IDX ON G_BASE_VOIE.TA_TRONCON_LOG(fid_type_action)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_TRONCON_LOG_FID_PNOM_IDX ON G_BASE_VOIE.TA_TRONCON_LOG(fid_pnom)
    TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_TRONCON_LOG TO G_ADMIN_SIG;
/*
La table TA_TYPE_VOIE regroupe tous les types de voies de la base voie tels que les avenues, boulevards, rues, senteir, etc.
*/

-- 1. Création de la table TA_TYPE_VOIE
CREATE TABLE G_BASE_VOIE.TA_TYPE_VOIE(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    code_type_voie CHAR(4) NOT NULL,
    libelle VARCHAR2(100) NOT NULL   
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_TYPE_VOIE IS 'Table rassemblant tous les types de voies présents dans la base voie. Ancienne table : TYPEVOIE.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TYPE_VOIE.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TYPE_VOIE.code_type_voie IS 'Code des types de voie présents dans la base voie. Ce champ remplace le champ CCODTVO.';
COMMENT ON COLUMN G_BASE_VOIE.TA_TYPE_VOIE.libelle IS 'Libellé des types de voie. Exemple : Boulevard, avenue, reu, sentier, etc.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_TYPE_VOIE 
ADD CONSTRAINT TA_TYPE_VOIE_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 5. Création des index
CREATE INDEX TA_TYPE_VOIE_CODE_TYPE_VOIE_IDX ON G_BASE_VOIE.TA_TYPE_VOIE(code_type_voie)
    TABLESPACE G_ADT_INDX;

-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_TYPE_VOIE TO G_ADMIN_SIG;
/*
La table TA_VOIE regroupe tous les informations de chaque voie de la base voie.
*/

-- 1. Création de la table TA_VOIE
CREATE TABLE G_BASE_VOIE.TA_VOIE(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    libelle_voie VARCHAR2(50) NOT NULL,
    complement_nom_voie VARCHAR2(50),
    date_saisie DATE DEFAULT sysdate NOT NULL,
    date_modification DATE DEFAULT sysdate NOT NULL,
    fid_pnom_saisie NUMBER(38,0) NOT NULL,
    fid_pnom_modification NUMBER(38,0) NOT NULL,
    fid_typevoie NUMBER(38,0) NOT NULL,
    fid_genre_voie NUMBER(38,0) NOT NULL,
    fid_rivoli NUMBER(38,0) NULL,
    fid_metadonnee NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_VOIE IS 'Table rassemblant toutes les informations pour chaque voie de la base. Ancienne table : VOIEVOI';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.objectid IS 'Clé primaire auto-incrémentée de la table. Elle remplace l''ancien identifiant ccomvoie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.libelle_voie IS 'Nom de la voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.complement_nom_voie IS 'Complément du nom de la voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.date_saisie IS 'Date de saisie de la voie (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.date_modification IS 'Date de modification de la voie (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.fid_pnom_saisie IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé une voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.fid_pnom_modification IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant modifié une voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.fid_typevoie IS 'Clé étangère vers la table TA_TYPE_VOIE permettant de catégoriser les voies de la base.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.fid_genre_voie IS 'Clé étrangère vers la table TA_LIBELLE permettant de connaître le genre du nom de la voie : masculin, féminin, neutre et non-identifié.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.fid_rivoli IS 'Clé étrangère vers la table TA_RIVOLI permettant d''associer un code RIVOLI à chaque voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE.fid_metadonnee IS 'Clé étrangère vers la table G_GEO.TA_METADONNEE permettant de connaître la source des voies (MEL ou IGN).';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_VOIE 
ADD CONSTRAINT TA_VOIE_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_VOIE
ADD CONSTRAINT TA_VOIE_FID_PNOM_SAISIE_FK
FOREIGN KEY (fid_pnom_saisie)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_VOIE
ADD CONSTRAINT TA_VOIE_FID_PNOM_MODIFICATION_FK
FOREIGN KEY (fid_pnom_modification)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_VOIE
ADD CONSTRAINT TA_VOIE_FID_TYPEVOIE_FK 
FOREIGN KEY (fid_typevoie)
REFERENCES G_BASE_VOIE.ta_type_voie(objectid);

ALTER TABLE G_BASE_VOIE.TA_VOIE
ADD CONSTRAINT TA_VOIE_FID_GENRE_VOIE_FK
FOREIGN KEY (fid_genre_voie)
REFERENCES G_BASE_VOIE.ta_libelle(objectid);

ALTER TABLE G_BASE_VOIE.TA_VOIE
ADD CONSTRAINT TA_VOIE_FID_RIVOLI_FK
FOREIGN KEY (fid_rivoli)
REFERENCES G_BASE_VOIE.ta_rivoli(objectid);

ALTER TABLE G_BASE_VOIE.TA_VOIE
ADD CONSTRAINT TA_VOIE_FID_METADONNEE_FK
FOREIGN KEY (fid_metadonnee)
REFERENCES G_GEO.ta_metadonnee(objectid);

-- 5. Création des index sur les clés étrangères
CREATE INDEX TA_VOIE_FID_PNOM_SAISIE_IDX ON G_BASE_VOIE.TA_VOIE(fid_pnom_saisie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_VOIE_FID_PNOM_MODIFICATION_IDX ON G_BASE_VOIE.TA_VOIE(fid_pnom_modification)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_VOIE_FID_TYPEVOIE_IDX ON G_BASE_VOIE.TA_VOIE(fid_typevoie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_VOIE_FID_GENRE_VOIE_IDX ON G_BASE_VOIE.TA_VOIE(fid_genre_voie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_VOIE_FID_RIVOLI_IDX ON G_BASE_VOIE.TA_VOIE(fid_rivoli)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_VOIE_FID_METADONNEE_IDX ON G_BASE_VOIE.TA_VOIE(fid_metadonnee)
    TABLESPACE G_ADT_INDX;
    
-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_VOIE TO G_ADMIN_SIG;
/*
La table TA_VOIE_LOG rassemble toutes les évolutions de chaque voie issue de TA_VOIE.
*/

-- 1. Création de la table TA_VOIE_LOG
CREATE TABLE G_BASE_VOIE.TA_VOIE_LOG(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    libelle_voie VARCHAR2(50) NOT NULL,
    complement_nom_voie VARCHAR2(50),
    date_action DATE NOT NULL,
    fid_typevoie NUMBER(38,0) NOT NULL,
    fid_genre_voie NUMBER(38,0) NOT NULL,
    fid_rivoli NUMBER(38,0) NOT NULL,
    fid_voie NUMBER(38,0) NOT NULL,
    fid_type_action NUMBER(38,0) NOT NULL,
    fid_pnom NUMBER(38,0)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_VOIE_LOG IS 'Table rassemblant toutes les informations pour chaque voie de la base. Ancienne table : VOIEVOI';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.objectid IS 'Clé primaire auto-incrémentée de la table. Elle remplace l''ancien identifiant ccomvoie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.libelle_voie IS 'Nom de la voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.complement_nom_voie IS 'Complément du nom de la voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.date_action IS 'Date de saisie, modification ou suppression de la voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.fid_typevoie IS 'Clé étangère vers la table TA_TYPE_VOIE permettant de catégoriser les voies de la base.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.fid_genre_voie IS 'Clé étrangère vers la table TA_LIBELLE permettant de connaître le genre du nom de la voie : masculin, féminin, neutre et non-identifié.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.fid_rivoli IS 'Clé étrangère vers la table TA_FANTOIR permettant d''associer un code fantoir à chaque voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.fid_voie IS 'Identifiant de tronçon de la table TA_VOIE permettant d''identifier la voie qui a été créée, modifiée ou supprimée.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.fid_type_action IS 'Clé étrangère vers la table TA_LIBELLE, permettant d''associer un type d''action à une voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_VOIE_LOG.fid_pnom IS 'Clé étrangère vers la table TA_AGENT permettant d''associer le pnom d''un agent à la voie qu''il a créé, modifié ou supprimé.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_VOIE_LOG 
ADD CONSTRAINT TA_VOIE_LOG_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_VOIE_LOG
ADD CONSTRAINT TA_VOIE_LOG_FID_TYPE_ACTION_FK
FOREIGN KEY (fid_type_action)
REFERENCES G_BASE_VOIE.ta_libelle(objectid);

ALTER TABLE G_BASE_VOIE.TA_VOIE_LOG
ADD CONSTRAINT TA_VOIE_LOG_FID_PNOM_FK
FOREIGN KEY (fid_pnom)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

-- 5. Création des index sur les clés étrangères et autres
CREATE INDEX TA_VOIE_LOG_FID_TYPEVOIE_IDX ON G_BASE_VOIE.TA_VOIE_LOG(fid_voie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_VOIE_LOG_FID_FANTOIR_IDX ON G_BASE_VOIE.TA_VOIE_LOG(fid_type_action)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_VOIE_LOG_FID_GENRE_VOIE_IDX ON G_BASE_VOIE.TA_VOIE_LOG(fid_pnom)
    TABLESPACE G_ADT_INDX;

-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_VOIE_LOG TO G_ADMIN_SIG;/*
La table TA_RELATION_TRONCON_VOIE regroupant tous les types et états permettant de catégoriser les objets de la base voie.
*/

-- 1. Création de la table TA_RELATION_TRONCON_VOIE
CREATE TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    sens CHAR(1) NOT NULL,
    ordre_troncon NUMBER(2,0) NOT NULL,
    fid_voie NUMBER(38,0) NOT NULL,
    fid_troncon NUMBER(38,0) NOT NULL,
    date_saisie DATE DEFAULT sysdate NOT NULL,
    date_modification DATE DEFAULT sysdate NOT NULL,
    fid_pnom_saisie NUMBER(38,0) NOT NULL,
    fid_pnom_modification NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE IS 'Table pivot permettant d''associer les tronçons de la table TA_TRONCON à leur voie présente dans TA_VOIE. Ancienne table : VOIECVT.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.sens IS 'Code permettant de connaître le sens du tronçon. Ancien champ : CCODSTR. A préciser avec Marie-Hélène, car les valeurs ne sont pas compréhensibles sans documentation.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.ordre_troncon IS 'Ordre dans lequel les tronçons se positionnent afin de contituer la voie. 1 est égal au début de la voie et 1 + n est égal au tronçon suivant.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.fid_voie IS 'Clé étrangère vers la table TA_VOIE permettant d''associer une voie à un ou plusieurs tronçons. Ancien champ : CCOMVOI.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.fid_troncon IS 'Clé étrangère vers la table TA_TRONCON permettant d''associer un ou plusieurs tronçons à une voie. Ancien champ : CNUMTRC.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.date_saisie IS 'Date de saisie de la relation troncon/voie en base (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.date_modification IS 'Date de la dernière modification de la relation troncon/voie en base (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.fid_pnom_saisie IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé la relation.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE.fid_pnom_modification IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant modifié la relation.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE 
ADD CONSTRAINT TA_RELATION_TRONCON_VOIE_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE
ADD CONSTRAINT TA_RELATION_TRONCON_VOIE_FID_VOIE_FK
FOREIGN KEY (fid_voie)
REFERENCES G_BASE_VOIE.ta_voie(objectid);

ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE
ADD CONSTRAINT TA_RELATION_TRONCON_VOIE_FID_TRONCON_FK
FOREIGN KEY (fid_troncon)
REFERENCES G_BASE_VOIE.ta_troncon(objectid);

-- 5. Création des index sur les clés étrangères
CREATE INDEX TA_RELATION_TRONCON_VOIE_FID_VOIE_IDX ON G_BASE_VOIE.TA_RELATION_TRONCON_VOIE(fid_voie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_RELATION_TRONCON_VOIE_FID_TRONCON_IDX ON G_BASE_VOIE.TA_RELATION_TRONCON_VOIE(fid_troncon)
    TABLESPACE G_ADT_INDX;

-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_RELATION_TRONCON_VOIE TO G_ADMIN_SIG;
/*
La table TA_RELATION_TRONCON_VOIE_LOG regroupant tous les types et états permettant de catégoriser les objets de la base voie.
*/

-- 1. Création de la table TA_RELATION_TRONCON_VOIE_LOG
CREATE TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    sens CHAR(1),
    ordre_troncon NUMBER(2),
    date_action DATE NOT NULL,
    fid_relation_troncon_voie NUMBER(38,0) NOT NULL,
    fid_voie NUMBER(38,0) NOT NULL,
    fid_troncon NUMBER(38,0) NOT NULL,
    fid_type_action NUMBER(38,0) NOT NULL,
    fid_pnom NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG IS 'Table de log enregistrant l''évolution des associations voies / tronçons.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.sens IS 'Code permettant de connaître le sens du tronçon. Ancien champ : CCODSTR Il s''agit du sens de codage du tronçon qui suit l''ordre de numération des seuils.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.ordre_troncon IS 'Ordre dans lequel les tronçons se positionnent afin de contituer la voie. 1 est égal au début de la voie et 1 + n est égal au tronçon suivant.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.date_action IS 'Date de création, modification ou suppression de la voie avec ce tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.fid_relation_troncon_voie IS 'Clé étrangère vers la table TA_RELATION_TRONCON_VOIE permettant d''identifier les relations tronçon/voies.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.fid_voie IS 'Identifiant des voies permettant d''associer une voie à un ou plusieurs tronçons. Ancien champ : CCOMVOI.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.fid_troncon IS 'Identifiant des tronçons permettant d''associer un ou plusieurs tronçons à une voie. Ancien champ : CNUMTRC.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.fid_type_action IS 'Clé étrangère vers la table TA_LIBELLE permettant de savoir quelle action a été effectuée sur l''association tronçon / voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG.fid_pnom IS 'Clé étrangère vers la table TA_AGENT permettant d''associer le pnom d''un agent à l''association voie / tronçon qu''il a créé, modifié ou supprimé.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG 
ADD CONSTRAINT TA_RELATION_TRONCON_VOIE_LOG_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG
ADD CONSTRAINT TA_RELATION_TRONCON_VOIE_LOG_FID_TYPE_ACTION_FK
FOREIGN KEY (fid_type_action)
REFERENCES G_BASE_VOIE.TA_LIBELLE(objectid);

ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG
ADD CONSTRAINT TA_RELATION_TRONCON_VOIE_LOG_FID_PNOM_FK
FOREIGN KEY (fid_pnom)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

-- 5. Création des index sur les clés étrangères et autre
CREATE INDEX TA_RELATION_TRONCON_VOIE_LOG_FID_RELATION_TRONCON_VOIE_IDX ON G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG(fid_relation_troncon_voie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_RELATION_TRONCON_VOIE_LOG_FID_TYPE_ACTION_IDX ON G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG(fid_type_action)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_RELATION_TRONCON_VOIE_LOG_FID_PNOM_IDX ON G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG(fid_pnom)
    TABLESPACE G_ADT_INDX;

-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG TO G_ADMIN_SIG;
/*
La table TA_SEUIL regroupe tous les seuils de la base voie.
*/

-- 1. Création de la table TA_SEUIL
CREATE TABLE G_BASE_VOIE.TA_SEUIL(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    geom SDO_GEOMETRY,
    cote_troncon CHAR(1),
    code_insee VARCHAR2(4000) AS(GET_CODE_INSEE_CONTENU(geom)),
    date_saisie DATE DEFAULT sysdate NOT NULL,
    date_modification DATE DEFAULT sysdate NOT NULL,
    fid_pnom_saisie NUMBER(38,0) NOT NULL,
    fid_pnom_modification NUMBER(38,0) NOT NULL,
    temp_idseui NUMBER(38,0)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_SEUIL IS 'Table contenant les seuils de la Base Voie. Plusieurs seuils peuvent se situer sur le même point géographique. Ancienne table : ILTASEU';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.objectid IS 'Clé primaire auto-incrémentée de la table identifiant chaque seuil. Cette pk remplace l''ancien identifiant idseui.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.geom IS 'Géométrie de type point de chaque seuil présent dans la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.cote_troncon IS 'Côté du tronçon auquel est rattaché le seuil. G = gauche ; D = droite. En agglomération le sens des tronçons est déterminé par ses numéros de seuils. En d''autres termes il commence au niveau du seuil dont le numéro est égal à 1. Hors agglomération, le sens du tronçon dépend du sens de circulation pour les rues à sens unique. Pour les rues à double-sens chaque tronçon est doublé donc leur sens dépend aussi du sens de circulation;';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.code_insee IS 'Champ calculé via une requête spatiale, permettant d''associer à chaque voie le code insee de la commune dans laquelle elle se trouve (issue de la table G_REFERENTIEL.MEL_COMMUNES).';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.date_saisie IS 'date de saisie du seuil (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.date_modification IS 'Dernière date de modification du seuil(par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.fid_pnom_saisie IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé un seuil.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.fid_pnom_modification IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant modifié un seuil.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL.temp_idseui IS 'Champ temporaire servant à l''import des données. Ce champ sera supprimé une fois l''import terminé.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_SEUIL 
ADD CONSTRAINT TA_SEUIL_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TA_SEUIL',
    'geom',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TA_SEUIL_SIDX
ON G_BASE_VOIE.TA_SEUIL(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
PARAMETERS('sdo_indx_dims=2, layer_gtype=POINT, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_SEUIL
ADD CONSTRAINT TA_SEUIL_FID_PNOM_SAISIE_FK
FOREIGN KEY (fid_pnom_saisie)
REFERENCES G_BASE_VOIE.TA_AGENT(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_SEUIL
ADD CONSTRAINT TA_SEUIL_FID_PNOM_MODIFICATION_FK
FOREIGN KEY (fid_pnom_modification)
REFERENCES G_BASE_VOIE.TA_AGENT(numero_agent);

-- 7. Création des index sur les clés étrangères et autres
CREATE INDEX TA_SEUIL_FID_PNOM_SAISIE_IDX ON G_BASE_VOIE.TA_SEUIL(fid_pnom_saisie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_SEUIL_FID_PNOM_MODIFICATION_IDX ON G_BASE_VOIE.TA_SEUIL(fid_pnom_modification)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_SEUIL_CODE_INSEE_IDX
ON G_BASE_VOIE.TA_SEUIL(GET_CODE_INSEE_CONTENU('TA_SEUIL', geom))
TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_SEUIL TO G_ADMIN_SIG;
/*
La table TA_SEUIL_LOG  permet d''avoir l''historique de toutes les évolutions des seuils de la base voie.
*/

-- 1. Création de la table TA_SEUIL_LOG
CREATE TABLE G_BASE_VOIE.TA_SEUIL_LOG(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    geom SDO_GEOMETRY NOT NULL,
    cote_troncon CHAR(1) NOT NULL,
    code_insee VARCHAR2(4000) NOT NULL,
    date_action DATE NOT NULL,
    fid_type_action NUMBER(38,0),
    fid_seuil NUMBER(38,0) NOT NULL,
    fid_pnom NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_SEUIL_LOG IS 'Table de log de la table TA_SEUIL permettant d''avoir l''historique de toutes les évolutions des seuils.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL_LOG.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL_LOG.geom IS 'Géométrie de type point de chaque seuil présent dans la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL_LOG.cote_troncon IS 'Côté du tronçon auquel est rattaché le seuil. G = gauche ; D = droite. En agglomération le sens des tronçons est déterminé par ses numéros de seuils. En d''autres termes il commence au niveau du seuil dont le numéro est égal à 1. Hors agglomération, le sens du tronçon dépend du sens de circulation pour les rues à sens unique. Pour les rues à double-sens chaque tronçon est doublé donc leur sens dépend aussi du sens de circulation.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL_LOG.code_insee IS 'Champ calculé via une requête spatiale, permettant d''associer à chaque rue le code insee de la commune dans laquelle elle se trouve (issue de la table G_REFERENTIEL.A_COMMUNES).';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL_LOG.date_action IS 'Date de création, modification ou suppression d''un seuil.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL_LOG.fid_type_action IS 'Clé étrangère vers la table TA_LIBELLE permettant de savoir quelle action a été effectuée sur le seuil.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL_LOG.fid_seuil IS 'Clé étrangère vers la table TA_SEUIL permettant de savoir sur quel seuil les actions ont été entreprises.';
COMMENT ON COLUMN G_BASE_VOIE.TA_SEUIL_LOG.fid_pnom IS 'Clé étrangère vers la table TA_AGENT permettant d''associer le pnom d''un agent au seuil qu''il a créé, modifié ou supprimé.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_SEUIL_LOG 
ADD CONSTRAINT TA_SEUIL_LOG_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TA_SEUIL_LOG',
    'geom',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TA_SEUIL_LOG_SIDX
ON G_BASE_VOIE.TA_SEUIL_LOG(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
PARAMETERS('sdo_indx_dims=2, layer_gtype=POINT, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_SEUIL_LOG
ADD CONSTRAINT TA_SEUIL_LOG_FID_TYPE_ACTION_FK 
FOREIGN KEY (fid_type_action)
REFERENCES G_BASE_VOIE.TA_LIBELLE(objectid);

ALTER TABLE G_BASE_VOIE.TA_SEUIL_LOG
ADD CONSTRAINT TA_SEUIL_LOG_FID_PNOM_FK
FOREIGN KEY (fid_pnom)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

-- 7. Création des index sur les clés étrangères
CREATE INDEX TA_SEUIL_LOG_FID_SEUIL_IDX ON G_BASE_VOIE.TA_SEUIL_LOG(fid_seuil)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_SEUIL_LOG_FID_TYPE_ACTION_IDX ON G_BASE_VOIE.TA_SEUIL_LOG(fid_type_action)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_SEUIL_LOG_FID_PNOM_IDX ON G_BASE_VOIE.TA_SEUIL_LOG(fid_pnom)
    TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_SEUIL_LOG TO G_ADMIN_SIG;
/*
La table TA_INFOS_SEUIL regroupe le détail des seuils de la base voie.
*/

-- 1. Création de la table TA_INFOS_SEUIL
CREATE TABLE G_BASE_VOIE.TA_INFOS_SEUIL(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    numero_seuil NUMBER(5,0) NOT NULL,
    numero_parcelle CHAR(9) NOT NULL,
    complement_numero_seuil VARCHAR2(10),
    date_saisie DATE DEFAULT sysdate NOT NULL,
    date_modification DATE DEFAULT sysdate NOT NULL,
    fid_seuil NUMBER(38,0) NOT NULL,
    fid_pnom_saisie NUMBER(38,0),
    fid_pnom_modification NUMBER(38,0)
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_INFOS_SEUIL IS 'Table contenant le détail des seuils, c''est-à-dire les numéros de seuil, de parcelles et les compléments de numéro de seuil. Cela permet d''associer un ou plusieurs seuils à un et un seul point géométrique au besoin.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.numero_seuil IS 'Numéro de seuil.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.numero_parcelle IS 'Numéro de parcelle issu du cadastre.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.complement_numero_seuil IS 'Complément du numéro de seuil. Exemple : 1 bis';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.date_saisie IS 'Date de saisie des informations du seuil (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.date_modification IS 'Date de modification des informations du seuil (par défaut la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.fid_seuil IS 'Clé étrangère vers la table TA_SEUIL, permettant d''affecter une géométrie à un ou plusieurs seuils, dans le cas où plusieurs se superposent sur le même point.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.fid_pnom_saisie IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé les informations d''un seuil.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL.fid_pnom_modification IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant modifié les informations d''un seuil.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_INFOS_SEUIL 
ADD CONSTRAINT TA_INFOS_SEUIL_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_INFOS_SEUIL
ADD CONSTRAINT TA_INFOS_SEUIL_FID_SEUIL_FK 
FOREIGN KEY (fid_seuil)
REFERENCES G_BASE_VOIE.ta_seuil(objectid);

ALTER TABLE G_BASE_VOIE.TA_INFOS_SEUIL
ADD CONSTRAINT TA_INFOS_SEUIL_FID_PNOM_SAISIE_FK 
FOREIGN KEY (fid_pnom_saisie)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_INFOS_SEUIL
ADD CONSTRAINT TA_INFOS_SEUIL_FID_PNOM_MODIFICATION_FK
FOREIGN KEY (fid_pnom_modification)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

-- 5. Création des index sur les clés étrangères et autres champs
CREATE INDEX TA_INFOS_SEUIL_FID_SEUIL_IDX ON G_BASE_VOIE.TA_INFOS_SEUIL(fid_seuil)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_SEUIL_FID_PNOM_SAISIE_IDX ON G_BASE_VOIE.TA_INFOS_SEUIL(fid_pnom_saisie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_SEUIL_FID_PNOM_MODIFICATION_IDX ON G_BASE_VOIE.TA_INFOS_SEUIL(fid_pnom_modification)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_SEUIL_NUMERO_SEUIL_IDX ON G_BASE_VOIE.TA_INFOS_SEUIL(numero_seuil)
    TABLESPACE G_ADT_INDX;

-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_INFOS_SEUIL TO G_ADMIN_SIG;
/*
La table TA_INFOS_SEUIL_LOG regroupe toutes les évlutions des objets présents dans la table TA_INFOS_SEUIL de la base voie.
*/

-- 1. Création de la table TA_INFOS_SEUIL_LOG
CREATE TABLE G_BASE_VOIE.TA_INFOS_SEUIL_LOG(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    numero_seuil NUMBER(5,0) NOT NULL,
    numero_parcelle CHAR(9) NOT NULL,
    complement_numero_seuil VARCHAR2(10),
    date_action DATE NOT NULL,
    fid_infos_seuil NUMBER(38,0) NOT NULL,
    fid_seuil NUMBER(38,0) NOT NULL,
    fid_type_action NUMBER(38,0) NOT NULL,
    fid_pnom NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_INFOS_SEUIL_LOG IS 'Table de log permettant d''enregistrer toutes les évlutions des objets présents dans la table TA_INFOS_SEUIL.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.numero_seuil IS 'Numéro de seuil.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.numero_parcelle IS 'Numéro de parcelle issu du cadastre.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.complement_numero_seuil IS 'Complément du numéro de seuil. Exemple : 1 bis';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.date_action IS 'Date de chaque action effectuée sur les objets de la table TA_INFOS_SEUILS.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.fid_infos_seuil IS 'Identifiant du seuil dans la table TA_INFOS_SEUIL.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.fid_seuil IS 'Identifiant de la table TA_SEUIL, permettant d''affecter une géométrie à un ou plusieurs seuils, dans le cas où plusieurs se superposent sur le même point.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.fid_type_action IS 'Clé étrangère vers la table TA_LIBELLE permettant de catégoriser les actions effectuées sur la table TA_INFOS_SEUIL.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_SEUIL_LOG.fid_pnom IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé, modifié ou supprimé des données dans TA_INFOS_SEUIL.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_INFOS_SEUIL_LOG 
ADD CONSTRAINT TA_INFOS_SEUIL_LOG_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_INFOS_SEUIL_LOG
ADD CONSTRAINT TA_INFOS_SEUIL_LOG_FID_TYPE_ACTION_FK 
FOREIGN KEY (fid_type_action)
REFERENCES G_BASE_VOIE.ta_libelle(objectid);

ALTER TABLE G_BASE_VOIE.TA_INFOS_SEUIL_LOG
ADD CONSTRAINT TA_INFOS_SEUIL_LOG_FID_PNOM_FK
FOREIGN KEY (fid_pnom)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

-- 5. Création des index sur les clés étrangères et les autres champs
CREATE INDEX TA_INFOS_SEUIL_LOG_FID_TYPE_ACTION_IDX ON G_BASE_VOIE.TA_INFOS_SEUIL_LOG(fid_type_action)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_SEUIL_LOG_FID_PNOM_IDX ON G_BASE_VOIE.TA_INFOS_SEUIL_LOG(fid_pnom)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_SEUIL_LOG_FID_INFOS_SEUIL_IDX ON G_BASE_VOIE.TA_INFOS_SEUIL_LOG(fid_infos_seuil)
    TABLESPACE G_ADT_INDX;

-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_INFOS_SEUIL_LOG TO G_ADMIN_SIG;
/*
La table TA_RELATION_TRONCON_SEUIL fait la relation entre les tronçons de la table TA_TRONCON et les seuils de la table TA_SEUIl qui s''y rattachent dans la base voie.
*/

-- 1. Création de la table TA_RELATION_TRONCON_SEUIL
CREATE TABLE G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL(
    fid_troncon NUMBER(38,0) NOT NULL,
    fid_seuil NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL IS 'Table pivot faisant la relation entre les tronçons de la table TA_TRONCON et les seuils de la table TA_SEUIl qui s''y rattachent. Ancienne table : ILTASIT.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL.fid_troncon IS 'Clé primaire et étrangère vers la table TA_TRONCON permettant d''asocier un tronçons aux seuils.';
COMMENT ON COLUMN G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL.fid_seuil IS 'Clé primaire et clé étrangère vers la table TA_SEUIL permettant d''associer un ou plusieurs seuils à un tronçon.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL 
ADD CONSTRAINT TA_RELATION_TRONCON_SEUIL_PK 
PRIMARY KEY("FID_TRONCON", "FID_SEUIL") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL
ADD CONSTRAINT TA_RELATION_TRONCON_SEUIL_FID_TRONCON_FK 
FOREIGN KEY (fid_troncon)
REFERENCES G_BASE_VOIE.TA_TRONCON(objectid);

ALTER TABLE G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL
ADD CONSTRAINT TA_RELATION_TRONCON_SEUIL_FID_SEUIL_FK
FOREIGN KEY (fid_seuil)
REFERENCES G_BASE_VOIE.TA_SEUIL(objectid);

-- 5. Création des index sur les clés étrangères
CREATE INDEX TA_RELATION_TRONCON_SEUIL_FID_TRONCON_IDX ON G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL(fid_troncon)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_RELATION_TRONCON_SEUIL_FID_SEUIL_IDX ON G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL(fid_seuil)
    TABLESPACE G_ADT_INDX;

-- 6. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_RELATION_TRONCON_SEUIL TO G_ADMIN_SIG;

/
/*
La table TA_POINT_INTERET regroupe toutes les géométries des point d''intérêts de la base voie.
*/

-- 1. Création de la table TA_POINT_INTERET
CREATE TABLE G_BASE_VOIE.TA_POINT_INTERET(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    geom SDO_GEOMETRY,
    date_saisie DATE DEFAULT sysdate NOT NULL,
    date_modification DATE DEFAULT sysdate NOT NULL,
    fid_pnom_saisie NUMBER(38,0) NOT NULL,
    fid_pnom_modification NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_POINT_INTERET IS 'Table regroupant toutes les géométries des points d''intérêt de type mairie ou mairie de quartier. Ancienne table : ILTALPU.';
COMMENT ON COLUMN G_BASE_VOIE.TA_POINT_INTERET.objectid IS 'Clé primaire auto-incrémentée de la table identifiant chaque point d''intérêt. Cette pk remplace l''ancien identifiant cnumlpu.';
COMMENT ON COLUMN G_BASE_VOIE.TA_POINT_INTERET.geom IS 'Géométrie de type point de chaque point d''intérêt présent dans la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_POINT_INTERET.date_saisie IS 'Date de saisie du point d''intérêt (par défaut il s''agit de la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_POINT_INTERET.date_modification IS 'Dernière date de modification du point d''intérêt (par défaut il s''agit de la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_POINT_INTERET.fid_pnom_saisie IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé un point d''intérêt.';
COMMENT ON COLUMN G_BASE_VOIE.TA_POINT_INTERET.fid_pnom_modification IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant modifié un point d''intérêt.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_POINT_INTERET 
ADD CONSTRAINT TA_POINT_INTERET_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TA_POINT_INTERET',
    'geom',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TA_POINT_INTERET_SIDX
ON G_BASE_VOIE.TA_POINT_INTERET(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
PARAMETERS('sdo_indx_dims=2, layer_gtype=POINT, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_POINT_INTERET
ADD CONSTRAINT TA_POINT_INTERET_FID_PNOM_SAISIE_FK
FOREIGN KEY (fid_pnom_saisie)
REFERENCES G_BASE_VOIE.TA_AGENT(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_POINT_INTERET
ADD CONSTRAINT TA_POINT_INTERET_FID_PNOM_MODIFICATION_FK
FOREIGN KEY (fid_pnom_modification)
REFERENCES G_BASE_VOIE.TA_AGENT(numero_agent);

-- 7. Création des index sur les clés étrangères et autres
CREATE INDEX TA_POINT_INTERET_FID_PNOM_SAISIE_IDX ON G_BASE_VOIE.TA_POINT_INTERET(fid_pnom_saisie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_POINT_INTERET_FID_PNOM_MODIFICATION_IDX ON G_BASE_VOIE.TA_POINT_INTERET(fid_pnom_modification)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_POINT_INTERET_CODE_INSEE_IDX
ON G_BASE_VOIE.TA_POINT_INTERET(GET_TEMP_CODE_INSEE('TA_POINT_INTERET', geom))
TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_POINT_INTERET TO G_ADMIN_SIG;
/*
La table TA_INFOS_POINT_INTERET regroupe tous les point d''intérêts de la base voie.
*/

-- 1. Création de la table TA_INFOS_POINT_INTERET
CREATE TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    nom VARCHAR2(200),
    complement_infos VARCHAR2(250),
    date_saisie DATE DEFAULT sysdate NOT NULL,
    date_modification DATE DEFAULT sysdate NOT NULL,
    fid_libelle NUMBER(38,0),
    fid_point_interet NUMBER(38,0),
    fid_pnom_saisie NUMBER(38,0) NOT NULL,
    fid_pnom_modification NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET IS 'Table contenant les informations de tous les points d''intérêts que nous gérons, c''est-à-dire les mairies et les mairies annexes. Ancienne table : ILTALPU.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.objectid IS 'Clé primaire auto-incrémentée de la table identifiant chaque point d''intérêt. Cette pk remplace l''ancien identifiant cnumlpu.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.nom IS 'Nom du Point d''intérêt correspondant au champ CLIBLPU de l''ancienne table ILTALPU.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.complement_infos IS 'Complément d''informations du point d''intérêt.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.date_saisie IS 'Date de saisie du point d''intérêt (par défaut il s''agit de la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.date_modification IS 'Dernière date de modification du point d''intérêt (par défaut il s''agit de la date du jour).';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.fid_libelle IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé un point d''intérêt.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.fid_point_interet IS 'Clé étrangère vers la table TA_POINT_INTERET permettant d''associer un POI à sa géométrie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.fid_pnom_saisie IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant créé un point d''intérêt.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET.fid_pnom_modification IS 'Clé étrangère vers la table TA_AGENT permettant de récupérer le pnom de l''agent ayant modifié un point d''intérêt.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET 
ADD CONSTRAINT TA_INFOS_POINT_INTERET_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET
ADD CONSTRAINT TA_INFOS_POINT_INTERET_FID_PNOM_SAISIE_FK
FOREIGN KEY (fid_pnom_saisie)
REFERENCES G_BASE_VOIE.TA_AGENT(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET
ADD CONSTRAINT TA_INFOS_POINT_INTERET_FID_PNOM_MODIFICATION_FK
FOREIGN KEY (fid_pnom_modification)
REFERENCES G_BASE_VOIE.TA_AGENT(numero_agent);

ALTER TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET
ADD CONSTRAINT TA_INFOS_POINT_INTERET_FID_LIBELLE_FK
FOREIGN KEY (fid_libelle)
REFERENCES G_BASE_VOIE.TA_LIBELLE(objectid);

ALTER TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET
ADD CONSTRAINT TA_INFOS_POINT_INTERET_FID_POINT_INTERET_FK
FOREIGN KEY (fid_point_interet)
REFERENCES G_BASE_VOIE.TA_POINT_INTERET(objectid);

-- 7. Création des index sur les clés étrangères
CREATE INDEX TA_INFOS_POINT_INTERET_FID_PNOM_SAISIE_IDX ON G_BASE_VOIE.TA_INFOS_POINT_INTERET(fid_pnom_saisie)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_POINT_INTERET_FID_PNOM_MODIFICATION_IDX ON G_BASE_VOIE.TA_INFOS_POINT_INTERET(fid_pnom_modification)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_POINT_INTERET_FID_LIBELLE_IDX ON G_BASE_VOIE.TA_INFOS_POINT_INTERET(fid_libelle)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_POINT_INTERET_FID_INFOS_POINT_INTERET_IDX ON G_BASE_VOIE.TA_INFOS_POINT_INTERET(fid_point_interet)
    TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_INFOS_POINT_INTERET TO G_ADMIN_SIG;
/*
La table TA_INFOS_POINT_INTERET_LOG  permet d''avoir l''historique de toutes les évolutions des seuils de la base voie.
*/

-- 1. Création de la table TA_INFOS_POINT_INTERET_LOG
CREATE TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG(
    objectid NUMBER(38,0) GENERATED BY DEFAULT AS IDENTITY,
    complement_infos VARCHAR2(250) NULL,
    nom VARCHAR2(200) NOT NULL,
    date_action DATE NOT NULL,
    fid_infos_point_interet NUMBER(38,0) NOT NULL,
    fid_libelle NUMBER(38,0) NOT NULL,
    fid_type_action NUMBER(38,0),
    fid_pnom NUMBER(38,0) NOT NULL
);

-- 2. Création des commentaires sur la table et les champs
COMMENT ON TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG IS 'Table d''historisation des actions effectuées sur les POI de la base voie.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG.objectid IS 'Clé primaire auto-incrémentée de la table.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG.complement_infos IS 'Complément d''informations du point d''intérêt.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG.nom IS 'Nom du point d''intérêt correspondant au champ CLIBLPU de l''ancienne table ILTALPU.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG.date_action IS 'Date de création, modification ou suppression d''un POI.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG.fid_info_point_interet IS 'Identifiant de la table TA_INFOS_POINT_INTERET permettant de savoir sur quel POI les actions ont été entreprises.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG.fid_libelle IS 'Identifiant de la table TA_LIBELLE permettant de connaître le type de chaque POI (point d''intérêt).';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG.fid_type_action IS 'Clé étrangère vers la table TA_LIBELLE permettant de savoir quelle action a été effectuée sur le POI.';
COMMENT ON COLUMN G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG.fid_pnom IS 'Clé étrangère vers la table TA_AGENT permettant d''associer le pnom d''un agent au POI qu''il a créé, modifié ou supprimé.';

-- 3. Création de la clé primaire
ALTER TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG 
ADD CONSTRAINT TA_INFOS_POINT_INTERET_LOG_PK 
PRIMARY KEY("OBJECTID") 
USING INDEX TABLESPACE "G_ADT_INDX";

-- 4. Création des métadonnées spatiales
INSERT INTO USER_SDO_GEOM_METADATA(
    TABLE_NAME, 
    COLUMN_NAME, 
    DIMINFO, 
    SRID
)
VALUES(
    'TA_INFOS_POINT_INTERET_LOG',
    'geom',
    SDO_DIM_ARRAY(SDO_DIM_ELEMENT('X', 684540, 719822.2, 0.005),SDO_DIM_ELEMENT('Y', 7044212, 7078072, 0.005)), 
    2154
);

-- 5. Création de l'index spatial sur le champ geom
CREATE INDEX TA_INFOS_POINT_INTERET_LOG_SIDX
ON G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG(GEOM)
INDEXTYPE IS MDSYS.SPATIAL_INDEX
PARAMETERS('sdo_indx_dims=2, layer_gtype=POINT, tablespace=G_ADT_INDX, work_tablespace=DATA_TEMP');

-- 6. Création des clés étrangères
ALTER TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG
ADD CONSTRAINT TA_INFOS_POINT_INTERET_LOG_FID_TYPE_ACTION_FK 
FOREIGN KEY (fid_type_action)
REFERENCES G_BASE_VOIE.TA_LIBELLE(objectid);

ALTER TABLE G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG
ADD CONSTRAINT TA_INFOS_POINT_INTERET_LOG_FID_PNOM_FK
FOREIGN KEY (fid_pnom)
REFERENCES G_BASE_VOIE.ta_agent(numero_agent);

-- 7. Création des index sur les clés étrangères et autres champs
CREATE INDEX TA_INFOS_POINT_INTERET_LOG_fid_point_interet_IDX ON G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG(fid_point_interet)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_POINT_INTERET_LOG_FID_TYPE_ACTION_IDX ON G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG(fid_type_action)
    TABLESPACE G_ADT_INDX;

CREATE INDEX TA_INFOS_POINT_INTERET_LOG_FID_PNOM_IDX ON G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG(fid_pnom)
    TABLESPACE G_ADT_INDX;

-- 8. Affectation du droit de sélection sur les objets de la table aux administrateurs
GRANT SELECT ON G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG TO G_ADMIN_SIG;
 /*
Création de la vue associant chaque tronçon à sa voie avec les identifiants des tronçons/voie, le nom et le code fantoir de la voie, 
le code INSEE, le nom de la commune, la longueur, les coordonnées des start/end points et les dates de saisie/modifications des tronçons en base.
*/

-- 1. Création de la vue
CREATE OR REPLACE FORCE VIEW G_BASE_VOIE.V_TRONCON_VOIE(
    ID_TRONCON, 
    CODE_INSEE, 
    NOM_COMMUNE, 
    ID_VOIE, 
    CODE_FANTOIR, 
    NOM_VOIE, 
    SENS, 
    ORDRE_TRONCON, 
    STARTPOINT_TRONCON, 
    ENDPOINT_TRONCON, 
    LONGUEUR_TRONCON,
    DATE_SAISIE,
    DATE_MODIFICATION,
    CONSTRAINT "V_TRONCON_VOIE_PK" PRIMARY KEY ("ID_TRONCON") DISABLE
) 
AS(
    SELECT
        a.objectid AS ID_TRONCON,
        b.code_insee AS CODE_INSEE,
        b.nom AS NOM_COMMUNE,
        d.objectid AS ID_VOIE,
        '591' || SUBSTR(b.code_insee, 3) || e.code_rivoli AS CODE_FANTOIR,
        d.libelle_voie AS NOM_VOIE,
        c.sens AS SENS,
        c.ordre_troncon AS ORDRE_TRONCON,
        REPLACE(
                TRIM(
                    BOTH')' FROM
                        TRIM(
                            BOTH '(' FROM
                            SUBSTR(
                                SDO_UTIL.TO_WKTGEOMETRY(
                                    SDO_LRS.GEOM_SEGMENT_START_PT(a.geom)
                                ),
                                7
                            )
                        )
                ),
                ' ',
                ', '
            )AS start_point,
            
            REPLACE(
                TRIM(
                    BOTH')' FROM
                        TRIM(
                            BOTH '(' FROM
                            SUBSTR(
                                SDO_UTIL.TO_WKTGEOMETRY(
                                    SDO_LRS.GEOM_SEGMENT_END_PT(a.geom)
                                ),
                                7
                            )
                        )
                ),
                ' ',
                ', '
            )AS end_point,
        ROUND(SDO_LRS.MEASURE_RANGE(SDO_LRS.CONVERT_TO_LRS_GEOM(a.geom, m.diminfo)), 2) AS longueur,
        a.date_saisie AS DATE_SAISIE,
        a.date_modification AS DATE_MODIFICATION
    FROM
        G_BASE_VOIE.TA_TRONCON a
        INNER JOIN G_BASE_VOIE.TA_RELATION_TRONCON_VOIE c ON c.fid_troncon = a.objectid
        INNER JOIN G_BASE_VOIE.TA_VOIE d ON d.objectid = c.fid_voie
        INNER JOIN G_BASE_VOIE.TA_RIVOLI e ON e.objectid = d.fid_rivoli,
        G_REFERENTIEL.A_COMMUNE b,
        USER_SDO_GEOM_METADATA m
    WHERE
        m.table_name = 'TA_TRONCON'
        AND SDO_ANYINTERACT(a.geom, b.geom) = 'TRUE'
        AND SDO_CONTAINS(
                            b.geom,
                            SDO_LRS.CONVERT_TO_STD_GEOM(
                                SDO_LRS.LOCATE_PT(
                                    SDO_LRS.CONVERT_TO_LRS_GEOM(a.GEOM,m.diminfo),
                                    SDO_GEOM.SDO_LENGTH(a.GEOM,m.diminfo)/2
                                )
                            )
            )='TRUE'
);

-- 2. Création des commentaires de la vue
COMMENT ON TABLE G_BASE_VOIE.V_TRONCON_VOIE IS 'Vue regroupant tous les tronçons valides par voie avec leur longueur, coordonnés, sens de saisie, ordre des tronçon dans la voie, code fantoir, nom de la voie, commune, date de création et de modification.' ;
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.id_troncon IS 'Identifiant des tronçons valides en base.';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.code_insee IS 'Code INSEE de la commune dans laquelle se situe le tronçon. ATTENTION : pour les tronçons en bordure de commune, le code INSEE peut être en fait le code INS d''un arrondissement belge si plus de 50% du tronçon se situe en belgique.';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.nom_commune IS 'Nom de la commune dans laquelle se situe le tronçon.';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.id_voie IS 'Identifiant interne des voies.';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.code_fantoir IS 'Code fantoir sur 10 caractères des voies (3 pour le code département + direction ; 3 pour le code commune ; 4 pour le rivoli(identifiant de la voie au sein de la commune).)';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.nom_voie IS 'Nom de la voie en minuscule.';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.sens IS 'Sens de saisie du tronçon en base.';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.ordre_troncon IS 'Ordre des tronçons au sein de leur voie (1 = début de la voie).';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.startpoint_troncon IS 'Coordonnées du point de départ du tronçon (EPSG : 2154).';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.endpoint_troncon IS 'Coordonnées du point d''arrivée du tronçon (EPSG : 2154).';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.longueur_troncon IS 'Longueur du tronçon calculée automatiquement.';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.date_saisie IS 'Date de saisie du tronçon en base.';
COMMENT ON COLUMN G_BASE_VOIE.V_TRONCON_VOIE.date_modification IS 'Date de la dernière modification du tronçon en base.';/*
Déclencheur permettant de remplir la table de logs TA_INFOS_SEUIL_LOG dans laquelle sont enregistrés chaque insertion, 
modification et suppression des données de la table TA_INFOS_SEUIL avec leur date et le pnom de l'agent les ayant effectuées.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUD_TA_INFOS_SEUIL_LOG
BEFORE INSERT OR UPDATE OR DELETE ON G_BASE_VOIE.TA_INFOS_SEUIL
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
    v_id_creation NUMBER(38,0);
    v_id_modification NUMBER(38,0);
    v_id_suppression NUMBER(38,0);
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    -- Sélection des id des actions présentes dans la table TA_LIBELLE
    SELECT a.objectid INTO v_id_creation FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'insertion';
    SELECT a.objectid INTO v_id_modification FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'modification';
    SELECT a.objectid INTO v_id_suppression FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'suppression';

    IF INSERTING THEN -- En cas d'insertion on insère les valeurs de la table TA_INFOS_SEUIL, le numéro d'agent correspondant à l'utilisateur, la date de insertion et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_INFOS_SEUIL_LOG(fid_infos_seuil, numero_seuil, numero_parcelle, complement_numero_seuil, date_action, fid_seuil, fid_type_action, fid_pnom)
            VALUES(
                    :new.objectid, 
                    :new.numero_seuil, 
                    :new.numero_parcelle, 
                    :new.complement_numero_seuil, 
                    sysdate,
                    :new.fid_seuil,
                    v_id_creation,
                    v_id_agent);
    ELSE
        IF UPDATING THEN -- En cas de modification on insère les valeurs de la table TA_INFOS_SEUIL, le numéro d'agent correspondant à l'utilisateur, la date de modification et le type de modification.
            INSERT INTO G_BASE_VOIE.TA_INFOS_SEUIL_LOG(fid_infos_seuil, numero_seuil, numero_parcelle, complement_numero_seuil, date_action, fid_seuil, fid_type_action, fid_pnom)
            VALUES(
                    :old.objectid, 
                    :old.numero_seuil, 
                    :old.numero_parcelle, 
                    :old.complement_numero_seuil, 
                    sysdate,
                    :old.fid_seuil,
                    v_id_modification,
                    v_id_agent);
        END IF;
    END IF;
    IF DELETING THEN -- En cas de suppression on insère les valeurs de la table TA_INFOS_SEUIL, le numéro d'agent correspondant à l'utilisateur, la date de suppression et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_INFOS_SEUIL_LOG(fid_infos_seuil, numero_seuil, numero_parcelle, complement_numero_seuil, date_action, fid_seuil, fid_type_action, fid_pnom)
        VALUES(
                :old.objectid, 
                :old.numero_seuil, 
                :old.numero_parcelle, 
                :old.complement_numero_seuil, 
                sysdate,
                :old.fid_seuil,
                v_id_suppression,
                v_id_agent);
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - G_BASE_VOIE.B_IUD_TA_INFOS_SEUIL_LOG','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de remplir la table de logs TA_RELATION_TRONCON_VOIE_LOG dans laquelle sont enregistrés chaque insertion, 
modification et suppression des données de la table TA_RELATION_TRONCON_VOIE avec leur date et le pnom de l'agent les ayant effectuées.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUD_TA_RELATION_TRONCON_VOIE_LOG
BEFORE INSERT OR UPDATE OR DELETE ON G_BASE_VOIE.TA_RELATION_TRONCON_VOIE
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
    v_id_creation NUMBER(38,0);
    v_id_modification NUMBER(38,0);
    v_id_suppression NUMBER(38,0);
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    -- Sélection des id des actions présentes dans la table TA_LIBELLE
    SELECT a.objectid INTO v_id_creation FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'insertion';
    SELECT a.objectid INTO v_id_modification FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'modification';
    SELECT a.objectid INTO v_id_suppression FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'suppression';

    IF INSERTING THEN -- En cas d'insertion on insère les valeurs de la table TA_RELATION_TRONCON_VOIE_LOG, le numéro d'agent correspondant à l'utilisateur, la date de insertion et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG(fid_relation_troncon_voie, fid_voie, fid_troncon, date_action, fid_type_action, fid_pnom)
            VALUES(
                    :new.objectid, 
                    :new.fid_voie, 
                    :new.fid_troncon, 
                    sysdate,
                    v_id_creation,
                    v_id_agent);
    ELSE
        IF UPDATING THEN -- En cas de modification on insère les valeurs de la table TA_RELATION_TRONCON_VOIE_LOG, le numéro d'agent correspondant à l'utilisateur, la date de modification et le type de modification.
            INSERT INTO G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG(fid_relation_troncon_voie, fid_voie, fid_troncon, date_action, fid_type_action, fid_pnom)
            VALUES(
                    :old.objectid, 
                    :old.fid_voie, 
                    :old.fid_troncon, 
                    sysdate,
                    v_id_modification,
                    v_id_agent);
        END IF;
    END IF;
    IF DELETING THEN -- En cas de suppression on insère les valeurs de la table TA_RELATION_TRONCON_VOIE_LOG, le numéro d'agent correspondant à l'utilisateur, la date de suppression et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_RELATION_TRONCON_VOIE_LOG(fid_relation_troncon_voie, fid_voie, fid_troncon, date_action, fid_type_action, fid_pnom)
        VALUES(
                :old.objectid, 
                :old.fid_voie, 
                :old.fid_troncon, 
                sysdate,
                v_id_suppression,
                v_id_agent);
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - G_BASE_VOIE.B_IUD_TA_RELATION_TRONCON_VOIE_LOG','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de remplir la table de logs TA_SEUIL_LOG dans laquelle sont enregistrés chaque insertion, 
modification et suppression des données de la table TA_SEUIL avec leur date et le pnom de l'agent les ayant effectuées.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUD_TA_SEUIL_LOG
BEFORE INSERT OR UPDATE OR DELETE ON G_BASE_VOIE.TA_SEUIL
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
    v_id_creation NUMBER(38,0);
    v_id_modification NUMBER(38,0);
    v_id_suppression NUMBER(38,0);
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    -- Sélection des id des actions présentes dans la table TA_LIBELLE
    SELECT a.objectid INTO v_id_creation FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'insertion';
    SELECT a.objectid INTO v_id_modification FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'modification';
    SELECT a.objectid INTO v_id_suppression FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'suppression';

    IF INSERTING THEN -- En cas d'insertion on insère les valeurs de la table TA_SEUIL_LOG, le numéro d'agent correspondant à l'utilisateur, la date de insertion et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_SEUIL_LOG(fid_seuil, geom, code_insee, cote_troncon, date_action, fid_type_action, fid_pnom)
            VALUES(
                    :new.objectid, 
                    :new.geom,
                    GET_CODE_INSEE_CONTENU('TA_SEUIL', :new.geom),
                    :new.cote_troncon,
                    sysdate,
                    v_id_creation,
                    v_id_agent);
    ELSE
        IF UPDATING THEN -- En cas de modification on insère les valeurs de la table TA_SEUIL_LOG, le numéro d'agent correspondant à l'utilisateur, la date de modification et le type de modification.
            INSERT INTO G_BASE_VOIE.TA_SEUIL_LOG(fid_seuil, geom, code_insee, cote_troncon, date_action, fid_type_action, fid_pnom)
            VALUES(
                    :old.objectid,
                    :old.geom,
                    GET_CODE_INSEE_CONTENU('TA_SEUIL', :old.geom),
                    :old.cote_troncon,
                    sysdate,
                    v_id_modification,
                    v_id_agent);
        END IF;
    END IF;
    IF DELETING THEN -- En cas de suppression on insère les valeurs de la table TA_SEUIL_LOG, le numéro d'agent correspondant à l'utilisateur, la date de suppression et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_SEUIL_LOG(fid_seuil, geom, code_insee, cote_troncon, date_action, fid_type_action, fid_pnom)
        VALUES(
                :old.objectid,
                :old.geom,
                GET_CODE_INSEE_CONTENU('TA_SEUIL', :old.geom), 
                :old.cote_troncon,
                sysdate,
                v_id_suppression,
                v_id_agent);
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - G_BASE_VOIE.B_IUD_TA_SEUIL_LOG','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de remplir la table de logs TA_TRONCON_LOG dans laquelle sont enregistrés chaque insertion, 
modification et suppression des données de la table TA_TRONCON avec leur date et le pnom de l'agent les ayant effectuées.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUD_TA_TRONCON_LOG
BEFORE INSERT OR UPDATE OR DELETE ON G_BASE_VOIE.TA_TRONCON
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
    v_id_creation NUMBER(38,0);
    v_id_modification NUMBER(38,0);
    v_id_suppression NUMBER(38,0);
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    -- Sélection des id des actions présentes dans la table TA_LIBELLE
    SELECT a.objectid INTO v_id_creation FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'insertion';
    SELECT a.objectid INTO v_id_modification FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'édition';
    SELECT a.objectid INTO v_id_suppression FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'suppression';

    IF INSERTING THEN -- En cas d'insertion on insère les valeurs de la table TA_TRONCON_LOG, le numéro d'agent correspondant à l'utilisateur, la date de insertion et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_TRONCON_LOG(fid_troncon, geom, date_action, fid_type_action, fid_pnom)
            VALUES(
                    :new.objectid,
                    :new.geom,
                    sysdate,
                    v_id_creation,
                    v_id_agent);
    ELSE
        IF UPDATING THEN -- En cas de modification on insère les valeurs de la table TA_TRONCON_LOG, le numéro d'agent correspondant à l'utilisateur, la date de modification et le type de modification.
            INSERT INTO G_BASE_VOIE.TA_TRONCON_LOG(fid_troncon, geom, date_action, fid_type_action, fid_pnom)
            VALUES(
                    :old.objectid, 
                    :old.geom,
                    sysdate,
                    v_id_modification,
                    v_id_agent);
        END IF;
    END IF;
    IF DELETING THEN -- En cas de suppression on insère les valeurs de la table TA_TRONCON_LOG, le numéro d'agent correspondant à l'utilisateur, la date de suppression et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_TRONCON_LOG(fid_troncon, geom, date_action, fid_type_action, fid_pnom)
        VALUES(
                :old.objectid, 
                :old.geom,
                sysdate,
                v_id_suppression,
                v_id_agent);
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - G_BASE_VOIE.B_IUD_TA_TRONCON_LOG','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de remplir la table de logs TA_TRONCON_LOG dans laquelle sont enregistrés chaque insertion, 
modification et suppression des données de la table TA_TRONCON avec leur date et le pnom de l'agent les ayant effectuées.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUD_TA_VOIE_LOG
BEFORE INSERT OR UPDATE OR DELETE ON G_BASE_VOIE.TA_VOIE
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
    v_id_creation NUMBER(38,0);
    v_id_modification NUMBER(38,0);
    v_id_suppression NUMBER(38,0);
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    -- Sélection des id des actions présentes dans la table TA_LIBELLE
    SELECT a.objectid INTO v_id_creation FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'insertion';
    SELECT a.objectid INTO v_id_modification FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'modification';
    SELECT a.objectid INTO v_id_suppression FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'suppression';

    IF INSERTING THEN -- En cas d'insertion on insère les valeurs de la table TA_VOIE_LOG, le numéro d'agent correspondant à l'utilisateur, la date de insertion et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_VOIE_LOG(fid_voie, fid_typevoie, fid_rivoli, complement_nom_voie, libelle_voie, fid_genre_voie, date_action, fid_type_action, fid_pnom)
            VALUES(
                    :new.objectid, 
                    :new.fid_typevoie, 
                    :new.fid_rivoli,
                    :new.complement_nom_voie,
                    :new.libelle_voie,
                    :new.fid_genre_voie,
                    sysdate,
                    v_id_creation,
                    v_id_agent);
    ELSE
        IF UPDATING THEN -- En cas de modification on insère les valeurs de la table TA_VOIE_LOG, le numéro d'agent correspondant à l'utilisateur, la date de modification et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_VOIE_LOG(fid_voie, fid_typevoie, fid_rivoli, complement_nom_voie, libelle_voie, fid_genre_voie, date_action, fid_type_action, fid_pnom)
            VALUES(
                    :old.objectid, 
                    :old.fid_typevoie, 
                    :old.fid_rivoli,
                    :old.complement_nom_voie,
                    :old.libelle_voie,
                    :old.fid_genre_voie,
                    sysdate,
                    v_id_modification,
                    v_id_agent);
        END IF;
    END IF;
    IF DELETING THEN -- En cas de suppression on insère les valeurs de la table TA_VOIE_LOG, le numéro d'agent correspondant à l'utilisateur, la date de suppression et le type de modification.
    INSERT INTO G_BASE_VOIE.TA_VOIE_LOG(fid_voie, fid_typevoie, fid_rivoli, complement_nom_voie, libelle_voie, fid_genre_voie, date_action, fid_type_action, fid_pnom)
        VALUES(
                :old.objectid, 
                :old.fid_typevoie, 
                :old.fid_rivoli,
                :old.complement_nom_voie,
                :old.libelle_voie,
                :old.fid_genre_voie,
                sysdate,
                v_id_suppression,
                v_id_agent);
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - G_BASE_VOIE.B_IUD_TA_VOIE_LOG','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de remplir la table de logs TA_POINT_INTERET_LOG dans laquelle sont enregistrés chaque création, 
modification et suppression des données de la table TA_POINT_INTERET avec leur date et le pnom de l'agent les ayant effectuées.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUD_TA_POINT_INTERET_LOG
BEFORE INSERT OR UPDATE OR DELETE ON G_BASE_VOIE.TA_POINT_INTERET
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
    v_id_insertion NUMBER(38,0);
    v_id_modification NUMBER(38,0);
    v_id_suppression NUMBER(38,0);
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    -- Sélection des id des actions présentes dans la table TA_LIBELLE
    SELECT a.objectid INTO v_id_insertion FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'insertion';
    SELECT a.objectid INTO v_id_modification FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'modification';
    SELECT a.objectid INTO v_id_suppression FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'suppression';

    IF INSERTING THEN -- En cas d'insertion on insère les valeurs de la table TA_POINT_INTERET_LOG, le numéro d'agent correspondant à l'utilisateur, la date de création et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_POINT_INTERET_LOG(fid_point_interet, geom, code_insee, date_action, fid_type_action, fid_pnom, fid_libelle)
            VALUES(
                    :new.objectid,
                    :new.geom,
                    GET_CODE_INSEE_CONTENU('TA_SEUIL', :new.geom),
                    sysdate,
                    v_id_insertion,
                    v_id_agent,
                    :new.fid_libelle);
    ELSE
        IF UPDATING THEN -- En cas de modification on insère les valeurs de la table TA_POINT_INTERET_LOG, le numéro d'agent correspondant à l'utilisateur, la date de modification et le type de modification.
            INSERT INTO G_BASE_VOIE.TA_POINT_INTERET_LOG(fid_point_interet, geom, complement_infos, nom, code_insee, date_action, fid_type_action, fid_pnom, fid_libelle)
            VALUES(
                    :new.objectid,
                    :old.geom,
                    :old.complement_infos,
                    :old.nom,
                    GET_CODE_INSEE_CONTENU('TA_SEUIL', :old.geom),
                    sysdate,
                    v_id_modification,
                    v_id_agent,
                    :old.fid_libelle);
        END IF;
    END IF;
    IF DELETING THEN -- En cas de suppression on insère les valeurs de la table TA_POINT_INTERET_LOG, le numéro d'agent correspondant à l'utilisateur, la date de suppression et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_POINT_INTERET_LOG(fid_point_interet, geom, complement_infos, nom, code_insee, date_action, fid_type_action, fid_pnom, fid_libelle)
        VALUES(
                    :new.objectid,
                    :old.geom,
                    :old.complement_infos,
                    :old.nom,
                    GET_CODE_INSEE_CONTENU('TA_SEUIL', :old.geom),
                    sysdate,
                    v_id_suppression,
                    v_id_agent,
                    :old.fid_libelle);
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - G_BASE_VOIE.B_IUD_TA_POINT_INTERET_LOG','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de remplir la table de logs TA_INFOS_POINT_INTERET_LOG dans laquelle sont enregistrés chaque création, 
modification et suppression des données de la table TA_INFOS_POINT_INTERET avec leur date et le pnom de l'agent les ayant effectuées.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUD_TA_INFOS_POINT_INTERET_LOG
BEFORE INSERT OR UPDATE OR DELETE ON G_BASE_VOIE.TA_INFOS_POINT_INTERET
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
    v_id_insertion NUMBER(38,0);
    v_id_modification NUMBER(38,0);
    v_id_suppression NUMBER(38,0);
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    -- Sélection des id des actions présentes dans la table TA_LIBELLE
    SELECT a.objectid INTO v_id_insertion FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'insertion';
    SELECT a.objectid INTO v_id_modification FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'modification';
    SELECT a.objectid INTO v_id_suppression FROM G_BASE_VOIE.TA_LIBELLE a WHERE a.valeur = 'suppression';

    IF INSERTING THEN -- En cas d'insertion on insère les valeurs de la table TA_INFOS_POINT_INTERET_LOG, le numéro d'agent correspondant à l'utilisateur, la date de création et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG(fid_infos_point_interet, complement_infos, nom, date_action, fid_type_action, fid_pnom, fid_libelle)
            VALUES(
                    :new.objectid,
                    :new.complement_infos,
                    :new.nom,
                    sysdate,
                    v_id_insertion,
                    v_id_agent,
                    :new.fid_libelle);
    ELSE
        IF UPDATING THEN -- En cas de modification on insère les valeurs de la table TA_INFOS_POINT_INTERET_LOG, le numéro d'agent correspondant à l'utilisateur, la date de modification et le type de modification.
            INSERT INTO G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG(fid_point_interet, complement_infos, nom, date_action, fid_type_action, fid_pnom, fid_libelle)
            VALUES(
                    :new.objectid,
                    :old.complement_infos,
                    :old.nom,
                    sysdate,
                    v_id_modification,
                    v_id_agent,
                    :old.fid_libelle);
        END IF;
    END IF;
    IF DELETING THEN -- En cas de suppression on insère les valeurs de la table TA_INFOS_POINT_INTERET_LOG, le numéro d'agent correspondant à l'utilisateur, la date de suppression et le type de modification.
        INSERT INTO G_BASE_VOIE.TA_INFOS_POINT_INTERET_LOG(fid_point_interet, complement_infos, nom, date_action, fid_type_action, fid_pnom, fid_libelle)
        VALUES(
                    :new.objectid,
                    :old.complement_infos,
                    :old.nom,
                    sysdate,
                    v_id_suppression,
                    v_id_agent,
                    :old.fid_libelle);
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - G_BASE_VOIE.B_IUD_TA_INFOS_POINT_INTERET_LOG','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de récupérer dans la table TA_INFOS_SEUIL, les dates de création/modification des entités ainsi que le pnom de l'agent les ayant effectués.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUX_TA_INFOS_SEUIL_DATE_PNOM
BEFORE INSERT OR UPDATE ON G_BASE_VOIE.TA_INFOS_SEUIL
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    IF INSERTING THEN -- En cas d'insertion on insère la FK du pnom de l'agent, ayant créé les infos du seuil, présent dans TA_AGENT.
       :new.fid_pnom_saisie := v_id_agent;
       :new.fid_pnom_modification := v_id_agent;
    ELSE
        IF UPDATING THEN -- En cas de mise à jour on édite le champ date_modification avec la date du jour et le champ fid_pnom_modification avec la FK du pnom de l'agent, ayant modifié les informations du seuil, présent dans TA_AGENT.
             :new.date_modification := TO_DATE(sysdate, 'dd/mm/yy');
             :new.fid_pnom_modification := v_id_agent;
        END IF;
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - B_IUX_TA_INFOS_SEUIL_DATE_PNOM','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de récupérer dans la table TA_SEUIL, les dates de création/modification des entités ainsi que le pnom de l'agent les ayant effectués.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUX_TA_SEUIL_DATE_PNOM
BEFORE INSERT OR UPDATE ON G_BASE_VOIE.TA_SEUIL
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
             
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    IF INSERTING THEN -- En cas d'insertion on insère la FK du pnom de l'agent, ayant créé le seuil, présent dans TA_AGENT.
       :new.fid_pnom_saisie := v_id_agent;
       :new.fid_pnom_modification := v_id_agent;
    ELSE
        IF UPDATING THEN -- En cas de mise à jour on édite le champ date_modification avec la date du jour et le champ fid_pnom_modification avec la FK du pnom de l'agent, ayant modifié le seuil, présent dans TA_AGENT.
             :new.date_modification := TO_DATE(sysdate, 'dd/mm/yy');
             :new.fid_pnom_modification := v_id_agent;
        END IF;
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - B_IUX_TA_SEUIL_DATE_PNOM','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de récupérer dans la table TA_TRONCON, les dates de création/modification des entités ainsi que le pnom de l'agent les ayant effectués.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUX_TA_TRONCON_DATE_PNOM
BEFORE INSERT OR UPDATE ON G_BASE_VOIE.TA_TRONCON
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);

BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    IF INSERTING THEN -- En cas d'insertion on insère la FK du pnom de l'agent, ayant créé le tronçon, présent dans TA_AGENT.
       :new.fid_pnom_saisie := v_id_agent;
       :new.fid_pnom_modification := v_id_agent;
    ELSE
        IF UPDATING THEN -- En cas de mise à jour on édite le champ date_modification avec la date du jour et le champ fid_pnom_modification avec la FK du pnom de l'agent, ayant modifié le tronçon, présent dans TA_AGENT.
             :new.date_modification := sysdate;
             :new.fid_pnom_modification := v_id_agent; 
        END IF;
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - B_IUX_TA_TRONCON_DATE_PNOM','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de récupérer dans la table TA_VOIE, les dates de création/modification des entités ainsi que le pnom de l'agent les ayant effectués.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUX_TA_VOIE_DATE_PNOM
BEFORE INSERT OR UPDATE ON G_BASE_VOIE.TA_VOIE
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
         
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    IF INSERTING THEN -- En cas d'insertion on insère la FK du pnom de l'agent, ayant créé la voie, présent dans TA_AGENT.
       :new.fid_pnom_saisie := v_id_agent;
       :new.fid_pnom_modification := v_id_agent;
    ELSE
        IF UPDATING THEN -- En cas de mise à jour on édite le champ date_modification avec la date du jour et le champ fid_pnom_modification avec la FK du pnom de l'agent, ayant modifié la voie, présent dans TA_AGENT.
             :new.date_modification := TO_DATE(sysdate, 'dd/mm/yy');
             :new.fid_pnom_modification := v_id_agent;
        END IF;
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - B_IUX_TA_VOIE_DATE_PNOM','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de récupérer dans la table TA_POINT_INTERET le pnom de l'agent ayant effectué la création et l'édition des objets.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUX_TA_POINT_INTERET_DATE_PNOM
BEFORE INSERT OR UPDATE ON G_BASE_VOIE.TA_POINT_INTERET
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
             
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    IF INSERTING THEN -- En cas d'insertion on insère la FK du pnom de l'agent, ayant créé le POI, présent dans TA_AGENT.
       :new.fid_pnom_saisie := v_id_agent;
       :new.fid_pnom_modification := v_id_agent;
    ELSE
        IF UPDATING THEN -- En cas de mise à jour on édite le champ fid_pnom_modification avec la FK du pnom de l'agent, ayant modifié le POI, présent dans TA_AGENT.
             :new.fid_pnom_modification := v_id_agent;
        END IF;
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - B_IUX_TA_POINT_INTERET_DATE_PNOM','bjacq@lillemetropole.fr');
END;

/
/*
Déclencheur permettant de récupérer dans la table TA_INFOS_POINT_INTERET, les dates de création/modification des géométries des POI ainsi que le pnom de l'agent les ayant effectués.
*/

CREATE OR REPLACE TRIGGER G_BASE_VOIE.B_IUX_TA_INFOS_POINT_INTERET_DATE_PNOM
BEFORE INSERT OR UPDATE ON G_BASE_VOIE.TA_INFOS_POINT_INTERET
FOR EACH ROW
DECLARE
    username VARCHAR2(100);
    v_id_agent NUMBER(38,0);
             
BEGIN
    -- Sélection du pnom
    SELECT sys_context('USERENV','OS_USER') into username from dual;

    -- Sélection de l'id du pnom correspondant dans la table TA_AGENT
    SELECT numero_agent INTO v_id_agent FROM G_BASE_VOIE.TA_AGENT WHERE pnom = username;

    IF INSERTING THEN -- En cas d'insertion on insère la FK du pnom de l'agent, ayant créé la géométrie du POI, présent dans TA_AGENT.
       :new.fid_pnom_saisie := v_id_agent;
       :new.fid_pnom_modification := v_id_agent;
    ELSE
        IF UPDATING THEN -- En cas de mise à jour on édite le champ date_modification avec la date du jour et le champ fid_pnom_modification avec la FK du pnom de l'agent, ayant modifié la géométrie du POI, présent dans TA_AGENT.
             :new.date_modification := TO_DATE(sysdate, 'dd/mm/yy');
             :new.fid_pnom_modification := v_id_agent;
        END IF;
    END IF;

    EXCEPTION
        WHEN OTHERS THEN
            mail.sendmail('bjacq@lillemetropole.fr',SQLERRM,'ERREUR TRIGGER - B_IUX_TA_INFOS_POINT_INTERET_DATE_PNOM','bjacq@lillemetropole.fr');
END;

/
