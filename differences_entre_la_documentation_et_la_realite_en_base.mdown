# Différences entre la documentation et la réalité de la base


## 1. Comparaison entre le MCD du fichier ![doc_i2g_dev_application_2013.pdf](/doc_i2g_dev_application_2013.pdf) et la structure en base


### 1.1. Les tables
On retrouve bien les 19 tables dans la base oracle et dans le MCD (p.8 - 9) du fichier ![doc_i2g_dev_application_2013.pdf](/doc_i2g_dev_application_2013.pdf).

### 1.2. Les champs

#### Les différences

1. Table *REMARQUES_VOIES*
	Le champ *ID_CATEGORIE_REMARQUE* est présent en base, mais absent du MCD du pdf.

2. Table *VOIEVOI*
	Le champ *genre* est présent en base, mais absent du MCD du pdf.

3. Table *ILTALPU*
	Les champs *URL*, *HTML* sont présents en base, mais absents du MCD du pdf.

4. Table ADMIN_LISTE_FAMILLE_POI
	Le champ *lIB_COURT* est présent en base, mais absent du MCD du pdf.

5. Table *ADMIN_USERS_GESTION_VOIES*
	Le champ *DROIT_GESTION_RUES* est présent en base, mais absnet du MCD du pdf.  

Comme on peut le voir ci-dessus il existe quelques différences entre le MCD du fichier ![doc_i2g_dev_application_2013.pdf](/doc_i2g_dev_application_2013.pdf) et les tables en base, mais sans grande incidence, puisque ces différences ne portent pas sur des champs de PK ou FK et ne changent pas fondamentalement la structure des tables.
Tous les autres champs des tables en base sont également présents dans le MCD du fichier ![doc_i2g_dev_application_2013.pdf](/doc_i2g_dev_application_2013.pdf).


### 1.3. Les contraintes

#### Les clés primaires
Sur les 19 tables, seules 8 disposent de clé primaire (cf. tableau ci-dessous).
``` TSV
Nom_Table	Nom_Colonne	Nom_Contrainte	Type_Contrainte	Statut	Validite	Nom_Index
ILTALPU	CNUMLPU	PK_ILTALPU	PRIMARY KEY	ENABLED	VALIDATED	PK_ILTALPU
ILTAPTZ	CNUMPTZ	PK_ILTAPTZ	PRIMARY KEY	ENABLED	VALIDATED	PK_ILTAPTZ
ILTASEU	IDSEUI	PK_ILTASEU	PRIMARY KEY	ENABLED	VALIDATED	PK_ILTASEU
ILTASIT	IDSEUI	ILTASIT_PK	PRIMARY KEY	ENABLED	VALIDATED	ILTASIT_PK
ILTASIT	CNUMTRC	ILTASIT_PK	PRIMARY KEY	ENABLED	VALIDATED	ILTASIT_PK
ILTATRC	CNUMTRC	PK_ILTATRC	PRIMARY KEY	ENABLED	VALIDATED	PK_ILTATRC
REMARQUES_VOIES	ID_REMARQUE	PK_REMARQUES_VOIES	PRIMARY KEY	ENABLED	VALIDATED	PK_REMARQUES_VOIES
TYPEVOIE	CCODTVO	TYPEVOIE_PK	PRIMARY KEY	ENABLED	VALIDATED	TYPEVOIE_PK
VOIEVOI	CCOMVOI	VOIEVOI_PK	PRIMARY KEY	ENABLED	VALIDATED	VOIEVOI_PK
```

Les tables suivantes n'ont donc pas de clé primaire :
``` TSV
Nom_Table_Sans_PK
ADMIN_LISTE_COTE
ILTAFILIA
ILTADTN
VOIECVT
ADMIN_LISTE_FAMILLE_POI
ADMIN_LISTE_ORIGINE_POI
ADMIN_LISTE_SYMBOLE
ADMIN_TABLES_VOIES
ADMIN_COL_TABLES_VOIES
ADMIN_CONFIG_GESTION_VOIES
ADMIN_USERS_GESTION_VOIES
```

De plus, la nomenclature n'est pas homogène, puisque le préfixe PK_ devient parfois un suffixe. Cependant, que ce fois en suffixe ou en préfixe la chaîne de caractère "PK" indiquant qu'il s'agit d'une contrainte de clé primaire est toujours présente dans le nom de ces contraintes.  

En outre, toutes les clés primaires de la base voie sont valides et disposent d'un index.

#### Les clés étrangères
Selon la documentation ![doc_i2g_dev_application_2013.pdf](/doc_i2g_dev_application_2013.pdf) il existe 12 clés étrangères dans les tables de la base voie :
``` TSV
Nom_Table	Nom_Colonne	Type_Donnees	Type_Contrainte
ILTASEU	CDCOTE	varchar(5)	FK
ILTASIT	IDSEUI	decimal(22,7)	FK
ILTASIT	CNUMTRC	decimal(22,5)	FK
ILTADTN	CNUMPTZ	decimal(22,8)	FK
ILTADTN	CNUMTRC	decimal(22,5)	FK
VOIECVT	CCOMVOI	decimal(22,7)	FK
VOIECVT	CNUMTRC	decimal(22,5)	FK
VOIEVOI	CCODTVO	char(4)	FK
ILTALPU	CDSFAMILLE	varchar(5)	FK
ILTALPU	CLEF_ORIGINE	varchar(5)	FK
ILTALPU	SYMBOLE_LIEU	varchar(50)	FK
ADMIN_COL_TABLES_VOIES	TYPE_OBJET	varchar(20)	FK
```

Or dans la base, il n'existe aucune clé étrangère dans ces tables (cf. ![contraintes_base_voie.tsv](/contraintes_base_voie.tsv)), il n'y a donc aucune contrainte d'intégrité, ce qui signifie qu'il peut potentiellement y avoir des doublons ou des valeurs manquantes. Le fait qu'il n'y ait aucune contrainte signifie que *TOUT* dépend de la saisie et de la mise à jour de la donnée par les utilisateurs/gestionnaires. Il n'y a aucune sécurité.

#### Les contraintes d'unicité
Hormis les clés primaires, il n'y a aucune contrainte d'unicité, ce qui est conforme au MCD du fichier ![doc_i2g_dev_application_2013.pdf](/doc_i2g_dev_application_2013.pdf) (cf. ![contraintes_base_voie.tsv](/contraintes_base_voie.tsv)).

#### Les contraintes de Non-nullité
Il existe 70 contraintes de non-nullité c'est-à-dire 70 - 9 clés primaires, soit 61 contraintes en plus que dans le MCD du pdf.
*Il faut regarder si ces contraintes ont été placées à bon escient ou non, ou s'il en manque*.

## 2. Les déclencheurs

### 2.1. Généralités
Il existe en tout 15 triggers dans le schéma G_SIDU, portant sur les tables de la base voie.
``` TSV
Nom_Table	Nom_trigger	Type_Trigger	Evenement_de_Declenchement	Schema	Statut
ILTADTN	TRG_ILTADTN_MAJ_CDVALDTN	BEFORE EACH ROW	INSERT OR UPDATE	G_SIDU	ENABLED
ILTALPU	TRG_ILTALPU	AFTER EACH ROW	INSERT OR UPDATE OR DELETE	G_SIDU	ENABLED
ILTALPU	TRG_ILTALPU_INS_CNUMLPU	BEFORE EACH ROW	INSERT	G_SIDU	ENABLED
ILTALPU	TRG_ILTALPU_MAJ_CDVALLPU	BEFORE EACH ROW	INSERT OR UPDATE	G_SIDU	ENABLED
ILTAPTZ	TRG_ILTAPTZ_INS_CNUMPTZ	BEFORE EACH ROW	INSERT	G_SIDU	ENABLED
ILTAPTZ	TRG_ILTAPTZ_MAJ_CDVALPTZ	BEFORE EACH ROW	INSERT OR UPDATE	G_SIDU	ENABLED
ILTASEU	TRG_ILTASEU	AFTER EACH ROW	INSERT OR UPDATE OR DELETE	G_SIDU	ENABLED
ILTASEU	TRG_ILTASEU_INS_IDSEUI	BEFORE EACH ROW	INSERT	G_SIDU	ENABLED
ILTASIT	TRG_ILTASIT	AFTER EACH ROW	INSERT OR UPDATE OR DELETE	G_SIDU	ENABLED
ILTATRC	TRG_ILTATRC_INS_CNUMTRC	BEFORE EACH ROW	INSERT	G_SIDU	DISABLED
ILTATRC	TRG_ILTATRC_MAJ_CDVALTRO	BEFORE EACH ROW	INSERT OR UPDATE	G_SIDU	ENABLED
ILTATRC	TRG_ILTATRC_SENS_TRC	AFTER EACH ROW	INSERT OR UPDATE OR DELETE	G_SIDU	ENABLED
REMARQUES_VOIES	TRG_REMARQUES_VOIES_INS_ID	BEFORE EACH ROW	INSERT	G_SIDU	ENABLED
VOIECVT	TRG_VOIECVT_MAJ_CVALIDE	BEFORE EACH ROW	INSERT OR UPDATE	G_SIDU	ENABLED
VOIEVOI	TRG_VOIEVOI_MAJ_CDVALVOI	BEFORE EACH ROW	INSERT OR UPDATE	G_SIDU	ENABLED
```

### 2.2. Trigger de la table *VOIEVOI*
La table *VOIEVOI* dispose d'un seul trigger nommé *TRG_VOIEVOI_MAJ_CDVALVOI*, déclenché par une insertion ou une édition. Le trigger est actif. 

#### Actions :
* Mise à jour du champ *CDTMVOI* (date de mise à jour) pour une insertion et une édition ;
* Mise à jour du champ *CDVALVOI* (validation de la voie) en fonction du champ *CDTFVOI* (date de fin de la voie) : si CDTFVOI>=sysdate alors la voie est valide, sinon non ;

### 2.3. Trigger de la table *VOIECVT*
La table *VOIECVT* dispose d'un seul trigger nommé *TRG_VOIECVT_MAJ_CVALIDE*, déclenché par une insertion ou une édition. Le trigger est actif.

#### Actions :
* Mise à jour du champ *CDTMCVT* (date de mise à jour) pour une insertion et une édition ;
* Mise à jour du champ *CVALIDE* (validité (V: valide ou I:invalide)) en fonction du champ *CDTFCVT* (date fin de validité) : si CDTFCVT>=sysdate alors la voie est valide, sinon non ;

### 2.4. Trigger de la table *REMARQUES_VOIES*
La table *REMARQUES_VOIES* dispose d'un seul trigger nommé *TRG_REMARQUES_VOIES_INS_ID*, déclenché par une insertion. Le trigger est actif.

#### Actions :
* Incrémentation de la clé primaire *ID_REMARQUE* via la séquence *SQ_REMARQUES_VOIES_ID* ;

### 2.5. Trigger de la table *ILTATRC*
La table *ILTATRC* dispose de trois triggers :  

**Le trigger *TRG_ILTATRC_SENS_TRC* :** actif, ce trigger est déclenché par une insertion, une édition ou une suppression  

#### Actions :
* Si un tronçon est supprimé dans la table *ILTATRC*, alors il est aussi supprimé dans la table *GEO.SENS_DES_TRONCONS* ;
* Si le champ *cdvaltro* (validité du tronçon) est mis à jour avec la valeur 'F' (faux), alors le tronçon correspondant est supprimé de la table *GEO.SENS_DES_TRONCONS* ;
* Si le champ *cdvaltro* (validité du tronçon) est mis à jour avec la valeur 'V' (vrai), alors les champs *GEOM* et *ANGLE* de la table *GEO.SENS_DES_TRONCONS* sont mis à jour à partir du champ *GEOM* de la table *G_SIDU.ILTATRC* ;
* En cas d'insertion dans la table *G_SIDU.ILTATRC*, les valeurs sont insérées dans les champs *OBJECTID*, *CNUMTRC*, *GEOM*, *ANGLE* de la table *GEO.SENS_DES_TRONCONS*. Le champ *SENS_DES_TRONCONS.OBJECTID* est égal au champ *ILTATRC.CNUMTRC* et le champ *SENS_DES_TRONCONS.ANGLE* est calculé à partir du champ *ILTATRC.GEOM*;

** Le trigger *TRG_ILTATRC_MAJ_CDVALTRO* :** actif, ce trigger est déclenché par une insertion ou une édition.

#### Actions :
* Mise à jour du champ *CDTMTRC* (date de mise à jour) pour une insertion et une édition ;
* Mise à jour du champ *CDVALTRO* (validité (V: valide ou I:invalide)) en fonction du champ *CDTFTRC* (date fin de validité) : si CDTFTRC>=sysdate alors la voie est valide, sinon non ;

** Le trigger *TRG_ILTATRC_INS_CNUMTRC* :** désactivé, ce trigger est déclenché par une insertion.

#### Actions :
* Incrémentation de la clé primaire *CNUMTRC* via la séquence *SQ_ILTATRC_CNUMTRC* ;

### 2.6. Trigger de la table *ILTASIT*
La table *ILTASIT* dispose d'un seul trigger nommé *TRG_ILTASIT*, déclenché par une insertion ou une édition. Le trigger est actif.

#### Actions :
* En cas de suppression dans la table *G_SIDU.ILTASIT*, l'entité correspondante est supprimée de la table *SIDU.ILTASIT* ;

* En cas de mise à jour d'une entité, les champs *CNUMTRC*, *NBABSCIS* et *CDCOTE* de l'entité correspondante dans la table *SIDU.ILTASIT* seront mis à jour. *Cependant, il faut regarder à quoi correspondent les objets geocodeurs et dist_tron_seuil car il ne s'agit ni de package, ni de proccédure, ni de fonction ni de trigger. Or ils utilisés pour remplir le champ NBABSCIS.*

### 2.7. Trigger de la table *ILTASEU*
La table ILTASEU dispose de deux triggers :  

**Le trigger *TRG_ILTASEU_INS_IDSEUI* :** actif, ce trigger est déclenché par une insertion.

#### Actions :
* Incrémentation de la clé primaire *IDSEUI* via la séquence *SQ_ILTASEU_IDSEUI* ;

**Le trigger *TRG_ILTASEU* :** actif, ce trigger est déclenché par une insertion, une modification ou une suppression.

#### Actions :
* En cas de suppression de la table *ILTASEU*, les entités correspondantes sont supprimées des tables *SIDU.ILTASIT* et *SIDU.ILTASEU*. L'égalité se fait sur le champ *IDSEUI* ;

* En cas de mise à jour, tous les champs de l'entité sont mis à jour dans les tables *SIDU.ILTASEU* et *GEO.TA_POINT_SEUIL*, sauf leur PK. L'égalité se fait sur le champ *IDSEUI* pour la table *SIDU.ILTASEUI* et *OBJECTID* pour la table *GEO.TA_POINT_SEUIL*;

* En cas de mise à jour et si le champ *CNUMTRC* n'est pas null, alors les champs *CNUMTRC*, *NBABSCIS* et *CDCOTE* de la table *G_SIDU.ILTASIT* sont mis à jour. L'égalité se fait sur le champ *IDSEUI*. *Cependant, il faut regarder à quoi correspondent les objets geocodeurs et dist_tron_seuil car il ne s'agit ni de package, ni de proccédure, ni de fonction ni de trigger. Or ils utilisés pour remplir le champ NBABSCIS.*

* En cas d'insertion, données sont dupliquées dans la table *SIDU.ILTASEU* et dans la table *GEO.TA_POINT_SEUIL* (pour les champs *OBJECTID*, *NUSEUI*, *NSSEUI*, *CNUMCOM*, *GEOM*, *CDCOTE*, *NPARCELLE* seulement) ;

* En cas d'insertion et si le champ *SIDU.ILTATRC.CDVALTRO* n'est pas null, alors les champs *IDSEUI*, *CNUMTRC*, *NBABSCIS*, *CDCOTE* de la table *SIDU.ILTASIT* sont remplis avec les données insérées ;

* En cas d'insertion et si le champ *CNUMTRC* n'est pas null, alors les champs *CNUMTRC*, *NBABSCIS* et *CDCOTE* de la table *G_SIDU.ILTASIT* sont remplis avec les données insérées. L'égalité se fait sur le champ *IDSEUI* ; 

### 2.8. Trigger de la table *ILTAPTZ*
La table ILTAPTZ dispose de deux triggers :

**Le trigger *TRG_ILTAPTZ_MAJ_CDVALPTZ* :** actif, ce trigger est déclenché par une insertion ou une édition.  

#### Actions :
* Mise à jour du champ *CDTMPTZ* (date de mise à jour) pour une insertion et une édition ;
* Mise à jour du champ *CDVALPTZ* (validation du noeud) en fonction du champ *CDTFPTZ* (date de fin du noeud) : si CDTFPTZ>=sysdate alors le noeud est valide, sinon non ;

**Le trigger *TRG_ILTAPTZ_INS_CNUMPTZ* :** actif, ce trigger est déclenché par une insertion.  

#### Actions :
* Incrémentation de la clé primaire *CNUMPTZ* via la séquence *SQ_ILTAPTZ_CNUMPTZ* ;

### 2.9. Trigger de la table ILTALPU
La table *ILTALPU* dispose de trois triggers :  

**Le trigger *TRG_ILTALPU_MAJ_CDVALLPU* :** actif, ce trigger est déclenché par une insertion ou une édition.  

#### Actions :
* Mise à jour du champ *CDVALLPU* (validation du Point d'intérêt (LES POI sont les anciens LPU (Lieux Publics))) en fonction du champ *CDTFLPU* (date de fin du POI) : si CDTFLPU>=sysdate alors le POI est valide, sinon non ;

**Le trigger *TRG_ILTALPU_INS_CNUMLPU* :** actif, ce trigger est déclenché par une insertion.

#### Actions :
* Incrémentation de la clé primaire *CNUMLPU* via la séquence SQ_ILTALPU_CNUMLPU ;

**Le trigger *TRG_ILTALPU* :** actif, ce trigger est déclenché par une insertion, une édition ou une suppression.  

#### Actions :
* En cas de mise à jour, la table *SIDU.ILTALPU* est mise à jour avec les mêmes données (seuls les champs *URL* et *HTML* ne sont pas dupliqués). Les champs CXLALPU et CYLALPU sont mis à jour avec les coordonnées dans le système de projet Lambert Nord (EPSG : 27561) ;

* En cas de mise à jour, la table *GEO.LM_LPU* est mise à jour avec les mêmes données (cela concerne les 26 champs) ;

* En cas d'insertion, les données des champs *CNUMLPU*, *CDTMLPU*, *CDTSLPU* de la table *SIDU.ILTALPU* sont duppliquées et les champs *CXLALPU* et *CYLALPU* sont remplis avec les coordonnées dans le système de projection Lambert Nord (EPSG : 27561). Les autres champs ont la valeur 'null'. Le même principe s'applique pour la table *GEO.LM_LPU* (sans la transformation des coordonnées en 27561) ;  

*Erreur à partir de la ligne 231. En effet de la ligne 231 à la ligne 282 se trouve un code de mise à jour inutile car déjà fait. Il serait bon de corriger cette erreur.*  

### 2.10. Trigger de la table *ILTADTN*
La table *ILTADTN* ne dispose que d'un seul trigger appelé *TRG_ILTADTN_MAJ_CDVALDTN*, déclenché par une insertion ou une édition. Le trigger est actif.

#### Actions :
* En cas d'insertion ou d'édition, les champs suivants de la table G_SIDU sont mis à jour : *CDTFDTN*, *CDVALDTN*, *CCODDFT*, *CANGTRC*.